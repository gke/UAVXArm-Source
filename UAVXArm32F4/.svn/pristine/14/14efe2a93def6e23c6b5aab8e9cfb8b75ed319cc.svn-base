// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.
//    If not, see http://www.gnu.org/licenses/

#ifndef _pinsf4v4_h
#define _pinsf4v4_h

#include "UAVX.h"

PinDef RCPins[MAX_RC_INPUTS] = {
	{true, PA0, PWMPinConfig, PWMIn_2_1},
	{true, PA1, PWMPinConfig, PWMIn_2_2},
	{true, PA2, PWMPinConfig, PWMIn_2_3},
	{true, PA3, PWMPinConfig, PWMIn_2_4},
	{true, PA6, PWMPinConfig, PWMIn_3_1},
	{true, PA7, PWMPinConfig, PWMIn_3_2},
	{true, PB0, PWMPinConfig, PWMIn_3_3},
	{true, PB1, PWMPinConfig, PWMIn_3_4} 
};

PinDef PWMPins[MAX_PWM_OUTPUTS] = {
		// Drives 1-4
	{true, PB9, PWMPinConfig, PWMOut_4_4},
	{true, PB8, PWMPinConfig, PWMOut_4_3},
	{true, PB7, PWMPinConfig, PWMOut_4_2},
	{true, PB6, PWMPinConfig, PWMOut_4_1},
	{true, PC6, PWMPinConfig, PWMOut_8_1}, // optionally WS2812
	{true, PC7, PWMPinConfig, PWMOut_8_2},

	// Drives 4-8 for brushless
	{true, PA6, PWMPinConfig, PWMOut_3_1},
	{true, PA7, PWMPinConfig, PWMOut_3_2}, 
	{true, PB0, PWMPinConfig, PWMOut_3_3},
	{true, PB1, PWMPinConfig, PWMOut_3_4}
};

PinDef GPIOPins[MAX_GPIO_PINS] = {
	{true, PA4, OutPinConfig,}, // Beeper
	{true, PC10, InpPinConfig,}, // Armed
	{true, PC9, InpPinConfig,}, // Landing
	{true, PA5, OutPinConfig,}, // Aux1
	{true, PA15, OutPinConfig,}, // Aux2
	{true, PC8, OutPinConfig,}, // Probe (Aux3)
	{true, PC14, InpPinConfig,}, // MPU6XXXIntSel 
	{true, PC15, InpPinConfig,} // HMC5XXXRdySel
};

PinDef WSPin = // Aux1 Pin for UAVXF4V3
	{true, PC6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_NOPULL, 
		{true, TIM8, TIM_Channel_1, TIM_DMA_CC1, &(TIM8->CCR1), GPIO_AF_TIM8 },
		{true, DMA_Channel_0, DMA2_Stream2}, DMA2_Stream2_IRQn };

PinDef LEDPins[MAX_LED_PINS] = { //
	{true, PB3, LEDPinConfig,}, // Yellow
	{true, PB4, LEDPinConfig,}, // Red
	{true, PC11, LEDPinConfig,}, // Blue
	{true, PC12, LEDPinConfig,},// Green
};

AnalogPinDef AnalogPins[MAX_ANALOG_CHANNELS] = {			
	{true, ADC1, PC0, ADC_Channel_10, DMA2_0_0_noIRQn, 1 }, // RF
	{true, ADC1, PC1, ADC_Channel_11, DMA2_0_0_noIRQn, 2 }, // Current
	{true, ADC1, PC2, ADC_Channel_12, DMA2_0_0_noIRQn, 3 }, // Volts
};

SerialPortDef SerialPorts[MAX_SERIAL_PORTS] = { // Tx, Rx
	{false, }, // mapped to USBSerial
	{true, USART1, PA9, PA10, 115200, USART1Config,},
	{true, USART2, PA2, PA3, 9600, USART2Config,},
	{true, USART3, PB10, PB11, 115200, USART3Config,},
	{false, UART4, PB10, PB11, 115200, UART4Config,},
	{false, 0 } // SoftSerial
};

PinDef USBDisconnectPin = { false, 0, };

const uint8 currGimbalType = noGimbal;
const boolean ledsLowOn = true;

DevDef busDev[maxDevSel] = {
	{true, imu0Sel, mpu6000IMU, true, 2, 0, {true, PB12, OutPinConfig,}},  
	{false,imu1Sel, },  
	{true, baroSel, ms5611Baro, true, 2, 0, {true, PC5, OutPinConfig,}},
	{true, magSel, hmc5xxxMag, true, 2, 0, {true, PC4, OutPinConfig,}},
	{true, memSel, spiFlashMem, true, 2, 0, {true, PC3, OutPinConfig,}},
	{false, gpsSel, },
	{false, rfSel, },
	{false, asSel, },
	{false, flowSel, },
	{false, escSel, }
};

const uint8 imuSel = imu0Sel;

void InitTarget(void) {

	TelemetrySerial = Usart1;
	
	InitSerialPort(TelemetrySerial, true, false);

	switch (CurrRxType) {
	case CPPMRx:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 10;
		CurrNoOfRCPins = 1;
		RxUsingSerial = false;
		break;
	case ParallelPPMRx:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 6;
		CurrNoOfRCPins = MAX_RC_INPUTS; //P(RCChannels);
		RxUsingSerial = false;
		break;
	default:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 10;
		CurrNoOfRCPins = 0;
		RxUsingSerial = true;
		RCSerial = Usart2;
		InitSerialPort(RCSerial, false, CurrRxType == FutabaSBusRx);
		break;
	} // switch
	
	GPSRxSerial = GPSTxSerial = Usart3;
	InitSerialPort(GPSRxSerial, false, false); 

	if (CurrNoOfWSLEDs > 0) // temporary KLUDGE - need to remap gimbal function
		CurrMaxPWMOutputs = 4;

} // uavxf4v4Init
#endif

