// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

#include "UAVX.h"

#define ALT_HOLD_MAX_ROC_MPS 0.2f // Must be changing altitude at less than this for alt. hold to be detected
#define ALT_MAX_THR_COMP_STICK FromPercent(20, RC_MAXIMUM)

#define SCALE_ANGLE_TO_RATE_RADPS (DegreesToRadians(720)/STICK_TO_ANGLE_RAD) // roll/pitch
#define NAV_RTH_LOCKOUT_ANGLE_RAD DegreesToRadians(10)

HistStruct AltCompF;

AxisStruct A[3];
AltStruct Alt;

real32 CameraAngle[3];
real32 OrbitCamAngle = 0.0f;
real32 AngleE, RateE;
int16 AttitudeHoldResetCount;
real32 AltFF;

real32 DesiredAltitude, Altitude;
real32 AltFiltComp, AltComp, ROC, MinROCMPS, EffMinROCMPS;
real32 AttComp = 0.0f;
real32 AltAccComp = 0.0f;
real32 ModeTransPoint, ModeTransPointR;
real32 AngleRateMix = 1.0f;
real32 YawStickScaleRadPS;
real32 YawStickThreshold;
real32 DesiredROC = 0.0f;
real32 CruiseThrottle = 0.5f;
real32 CurrMaxTiltAngle = 0.0f;
real32 TuneKpScale;
int8 BeepTick = 0;

void CalcAttThrComp(void) {
	// replace with lookup table
	real32 Temp, cr, cp;

	if ((State == InFlight) && !F.UsingRateControl) { // forget near level check

		//RangefinderAltitude *= sinf(Radian(90-AbsoluteValue(Maximum(pitch, roll))))* RangefinderAltitude;

		cr = cosf(Limit1(A[Roll].Angle, Nav.MaxAngle));
		cp = cosf(Limit1(A[Pitch].Angle, Nav.MaxAngle));

		Temp = (1.0f / (cr * cp)) - 1.0f;
		Temp *= AltFF;
		Temp = Limit(Temp, 0.0f, ALT_MAX_THR_COMP_STICK);
		AttComp = SlewLimit(AttComp, Temp, ALT_MAX_THR_COMP_STICK * 2.0f, dT);

	} else
		AttComp = 0.0f;

} // CalcAttThrComp


enum AcqAltStates {
	ForceDescent, Climbing, JustCruising
};
uint8 AcqAltState = JustCruising;

boolean UseGliderStrategy = false;

void AltitudeHold(real32 MinROCMPS, real32 MaxROCMPS) {
	real32 Pa, Ia, Pr, Dr, AltE, ROCE;

	AltE = DesiredAltitude - Altitude; // TODO: could be LARGE - limit?

	Pa = AltE * Alt.O.Kp;

	Alt.O.IntE += AltE * Alt.O.Ki * AltdT;
	Alt.O.IntE = Limit1(Alt.O.IntE, Alt.O.IL);
	Ia = Alt.O.IntE;

	DesiredROC = Pa + Ia;
	DesiredROC = Limit(DesiredROC, MinROCMPS, MaxROCMPS);

	ROCE = DesiredROC - ROC;

	Pr = ROCE * Alt.I.Kp;
	Dr = AltAccComp = Limit1(AccZ * Alt.I.Kd, 0.2f);

	AltComp = LPFilter(&AltCompF, Pr + Dr, AltLPFHz, AltdT);
	AltComp = Limit1(AltComp, ALT_MAX_THR_COMP_STICK);

} // AltitudeHold

void AcquireAltitudeFW(void) { // FIXED WING
	// Synchronised to baro intervals independent of active altitude source

	//real32 Pa, Ia, Pr, Dr, AltE, ROCE;

	if (UseGliderStrategy)

		switch (AcqAltState) {
		case ForceDescent:
			if (Altitude > AltMaxM) {
				//	if ((AltE < VRS_ALT_DIFF_M) && (Altitude > VRS_SAFETY_ALT_M)
				//			&& (NavState == AcquiringAltitude))
				//		Fl = Limit(Abs(AltE - VRS_ALT_DIFF_M) * 0.05f, 0.0f, 1.0f);
				//	else
				Fl = Limit(Abs(Altitude - AltMaxM) * 0.05f, 0.0f, 1.0f);

				AltComp = -1.0f;
			} else
				AcqAltState = JustCruising;
			break;
		case Climbing:
			if (Altitude > AltCutoffM) {
				AcqAltState = JustCruising;
			} else {
				DesiredAltitude = AltCutoffM;
				AltitudeHold(-5.0f, 5.0f);
			}
			break;
		case JustCruising:
			if (Altitude > AltMaxM) {
				AltComp = -1.0f;
				AcqAltState = ForceDescent;
			} else {
				if (Altitude < AltMinM)
					AcqAltState = Climbing;
				else {
					if (CommenceThermalling() && (NavState != UsingThermal)) { // after cruise timeout
						InitThermalling();
						SuppressThrottle();
						F.Soaring = true;
						PrevNavState = NavState;
						mSTimer(mSClock(), ThermalTimeout, THERMAL_MIN_MS);
						NavState = UsingThermal;
					} else {
						// do nothing - just keep gliding :)
					}
				}
			}
			break;
		} // switch
	else
		AltitudeHold(-5.0f, 5.0f);

} // AcquireAltitudeFW


void AcquireAltitude(void) {
	// Synchronised to baro intervals independent of active altitude source
	real32 EffMinROCMPS;

	EffMinROCMPS = (F.VRSHazard || (NavState == ReturningHome) || (NavState
			== Transiting)) ? VRS_MIN_ROC_MPS : MinROCMPS;

	AltitudeHold(EffMinROCMPS, ALT_MAX_ROC_MPS);

} // AcquireAltitude


void TrackCruiseThrottle(void) {

	if (F.Emulation)
		CruiseThrottle = THROTTLE_DEFAULT_CRUISE;
	else {
		if ((Abs(ROC) < ALT_HOLD_MAX_ROC_MPS) && (DesiredThrottle
				> THROTTLE_MIN_CRUISE)) {
			CruiseThrottle += (DesiredThrottle > CruiseThrottle ? 0.002f
					: -0.002f) * AltdT;
			CruiseThrottle
					= Limit(CruiseThrottle, THROTTLE_MIN_CRUISE, THROTTLE_MAX_CRUISE );
			NV.P[CurrPS][CruiseThr] = CruiseThrottle * 100.0f;
		}
	}
} // TrackCruiseThrottle


void DoAltitudeControl(void) {

	if (F.NewAltitudeValue) {
		F.NewAltitudeValue = false;

		if (F.AltControlEnabled) {

			if (F.SticksUnchangedFailsafe || F.BatteryFailsafe || ((NavState
					!= HoldingStation) && (NavState != PIC))) { // Navigating - using CruiseThrottle
				F.HoldingAlt = true;
				if (IsFixedWing)
					AcquireAltitudeFW();
				else
					AcquireAltitude();
			} else {
				CheckThrottleMoved();
				if (F.ThrottleMoving || ((Abs(ROC) > 0.25f) && !F.HoldingAlt)) { // was 0.04f!
					F.HoldingAlt = false;
					DesiredAltitude = Altitude;
					Alt.O.IntE = AltComp = Fl = 0.0f;
				} else {
					F.HoldingAlt = true;
					TrackCruiseThrottle();
					if (IsFixedWing)
						AcquireAltitudeFW();
					else
						AcquireAltitude(); // using Stick Throttle NOT cruise throttle
				}
			}
		} else {
			F.VRSHazard = ROC < VRS_MIN_ROC_MPS;
			DesiredAltitude = Altitude; // zzz redundant
			AltComp = Fl = 0.0f;
			F.HoldingAlt = false;
		}
	}

} // DoAltitudeControl


void DetermineControl(void) {

	A[Pitch].Control = Threshold(A[Pitch].Desired, THRESHOLD_STICK);
	A[Roll].Control = Threshold(A[Roll].Desired, THRESHOLD_STICK);
	A[Yaw].Control = Threshold(A[Yaw].Desired, YawStickThreshold);

	F.YawActive = IsFixedWing ? Max(Abs(A[Yaw].Control), Abs(A[Roll].Control))
			> 0.0f : Abs(A[Yaw].Control) > 0.0f;

	if (F.NavigationEnabled && F.NavigationActive) {
		A[Pitch].Control += A[Pitch].NavCorr;
		A[Roll].Control += A[Roll].NavCorr;
		// not used A[Yaw].Control += A[Yaw].NavCorr;
	}

} // DetermineControl


real32 ComputeRateDerivative(AxisStruct *C, real32 RateE) {
	real32 r;

	//#define USE_FC
	//#define MATLAB_DERIV

#if defined(MATLAB_DERIV)

	// specific to design dT
	C->RateD = (RateE - C->Ratep) * C->I.Kd - C->RateD * C->I.FC;
	C->Ratep = RateE;

#elif defined(USE_FC)

	const real32 Tau = 1.0/(TWO_PI * C->FC);

	r = C->RateD + dT / (dT + Tau) * (RateE - C->RateD);
	C->RateD = (r - C->Ratep) * dTR;
	C->Ratep = r;

#else
	r = LPFilter(&C->RateF, RateE, C->FC, dT);
	C->RateD = (r - C->Ratep) * dTR;
	C->Ratep = r;
	C->RateD = Smoothr32xn(&C->RateDF, 4, C->RateD);
#endif

	return (C->RateD);

} // ComputeRateDerivative


void ZeroPIDIntegrals(void) {
	int32 a;

	for (a = Pitch; a <= Yaw; a++)
		A[a].O.IntE = A[a].I.IntE = 0.0f; // TODO: I.IntE unused

} // ZeroPIDIntegrals


void DoRateControl(int32 a) {
	real32 DesiredAngle, AngleE, DesiredRate, RateE;
	real32 Pa, Pr, Dr;
	AxisStruct *C;

	C = &A[a];

	DesiredAngle = C->Control * AngleRateMix;

	AngleE = DesiredAngle - C->Angle;
	AngleE = Limit1(AngleE, DegreesToRadians(30));

	Pa = AngleE * C->O.Kp;
	C->O.IntE = 0.0f; // for flip back to angle mode

	DesiredRate = Pa + C->Control * SCALE_ANGLE_TO_RATE_RADPS * (1.0f
			- AngleRateMix);

	RateE = Rate[a] - DesiredRate;

	Pr = RateE * C->I.Kp;
	Dr = ((TuneAxis == a) && (TuneState == Tuning)) ? 0.0f
			: ComputeRateDerivative(C, RateE) * C->I.Kd;

	C->Out = Limit1(Pr + Dr, 1.0f);

} // DoRateControl


void DoAngleControl(int32 a) { // with Ming Liu
	real32 DesiredAngle, AngleE, DesiredRate, RateE;
	real32 Pa, Ia, Pr, Dr;
	AxisStruct *C;

	C = &A[a];

	DesiredAngle = Limit1(C->Control, MAX_ANGLE_RAD);

	AngleE = DesiredAngle - C->Angle;
	AngleE = Limit1(AngleE, DegreesToRadians(30));

	Pa = AngleE * C->O.Kp;

	C->O.IntE += AngleE * C->O.Ki * dT;
	C->O.IntE = Limit1(C->O.IntE, C->O.IL);
	Ia = C->O.IntE;

	DesiredRate = Pa + Ia;

	RateE = Rate[a] - DesiredRate;

	Pr = RateE * C->I.Kp;

	Dr = TuningEnabled && (TuneState == Tuning) ? 0.0f : ComputeRateDerivative(
			C, RateE) * C->I.Kd;

	C->Out = Limit1(Pr + Dr, 1.0f);

} // DoAngleControl


real32 MinimumTurn(real32 Desired) {
	real32 HeadingE, absHeadingE;
	static real32 TurnSign;
	static boolean TurnCommit = false;

	HeadingE = MakePi(Desired - Heading);

	if (IsFixedWing) {
		if (NavState == UsingThermal) {
			TurnCommit = true;
			TurnSign = 1.0f;
			HeadingE = Make2Pi(Desired - Heading); // turn right
		} else {
			HeadingE = MakePi(Desired - Heading);
			absHeadingE = fabsf(HeadingE);
			if (absHeadingE > DegreesToRadians(160)) {
				TurnCommit = true;
				TurnSign = Sign(HeadingE);
			} else if (absHeadingE < DegreesToRadians(135))
				TurnCommit = false;

			if (TurnCommit)
				HeadingE = TurnSign * absHeadingE;
		}
	}
	return (HeadingE);

} // MinimumTurn

static void DoYawControlFW(void) {
	real32 Pa, Pr, RateE;
	static real32 DesiredRate = 0.0f;

	if (F.OrbitingWP || F.NavigationEnabled)
		DesiredHeading = F.YawActive ? Heading : Nav.DesiredHeading;

	HeadingE = MinimumTurn(DesiredHeading);
	HeadingE = Limit1(HeadingE, DegreesToRadians(30));

	Pa = HeadingE * A[Yaw].O.Kp;

	DesiredRate = Pa;

	RateE = (DesiredRate + A[Yaw].Control * YawStickScaleRadPS) - Rate[Yaw];
	Pr = RateE * A[Yaw].I.Kp;

	A[Yaw].Out = Limit1(Pr, 1.0);

	real32 Temp = A[Roll].NavCorr;
#if defined(SUPPRESS_FULL_ROLL_MATH)
	A[Roll].NavCorr = 2.0f * Pr * NAV_MAX_ANGLE_RAD;
#else
	A[Roll].NavCorr = atanf(Limit1(DesiredRate * Airspeed *
			GRAVITY_MPS_S_R, NAV_MAX_ANGLE_RAD));
#endif
	A[Roll].NavCorr = SlewLimit(Temp, A[Roll].NavCorr, DegreesToRadians(10.0f),
			dT);

} // DoYawControlFW


static void DoYawControl(void) {
	real32 Pa, Pr, RateE;
	static real32 DesiredRate = 0.0f;

	if (F.UsingRateControl) {

		RateE = A[Yaw].Control * YawStickScaleRadPS - Rate[Yaw];
		Pr = RateE * A[Yaw].I.Kp;

		A[Yaw].Out = Limit1(Pr, 1.0);

	} else {

		if (F.YawActive || F.OrbitingWP || F.VRSHazard || F.UsingPOI)
			DesiredHeading = F.YawActive ? Heading : Nav.DesiredHeading;

		HeadingE = MinimumTurn(DesiredHeading);
		HeadingE = Limit1(HeadingE, DegreesToRadians(30));

		Pa = HeadingE * A[Yaw].O.Kp;

		DesiredRate = Pa;

		RateE = (DesiredRate + A[Yaw].Control * YawStickScaleRadPS) - Rate[Yaw];
		Pr = RateE * A[Yaw].I.Kp;

		A[Yaw].Out = Limit1(Pr, 1.0f);
	}

} // DoYawControl


void DoControl(void) {
	int32 a;

	CurrMaxTiltAngle = Max(Abs(A[Roll].Angle), Abs(A[Pitch].Angle));
	F.NearLevel = CurrMaxTiltAngle < NAV_RTH_LOCKOUT_ANGLE_RAD;

	AltCompF.Primed = false;
	if (!IsFixedWing)
		CalcAttThrComp(); // used as overall feed forward for non fixed wing
	DetermineControl();

	if (State == InFlight) {

		if (IsFixedWing)
			DoYawControlFW(); // must do first for fixed wing turn coordination
		else
			DoYawControl();

		for (a = Pitch; a <= Roll; a++)
			if (F.UsingRateControl)
				DoRateControl(a);
			else
				DoAngleControl(a);

		Tune();

	} else
		A[Roll].Out = A[Pitch].Out = A[Yaw].Out = 0.0f;

	UpdateDrives();

} // DoControl


void InitControl(void) {
	int32 a;
	AxisStruct *C;

	HeadingE = AltComp = AttComp = 0.0f;

	for (a = Pitch; a <= Yaw; a++) {
		C = &A[a];
		C->Angle = 0.0f;
		Acc[a] = Rate[a] = 0.0f;
		C->O.IntE = 0.0f;
		C->O.Dp = 0.0f;
		C->Ratep = 0.0f;
		C->I.Dp = 0.0f;

		C->NavCorr = 0.0f;
		C->RateF.Primed = false;
		C->RateDF.Primed = false;

		C->Out = 0.0f;
	}
	Acc[Z] = -GRAVITY_MPS_S;

} // InitControl


