// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// Autonomous flight routines

#include "UAVX.h"

real32 NavdT, NavdTR;
uint32 LastNavUpdateuS = 0;
real32 EffNavSensitivity;
NavStruct Nav;
real32 DesiredVel;
real32 POIHeading = 0.0f;
real32 NorthP, EastP;
uint8 PrevWPNo;
real32 PosXTrack, VelXTrack, PosYTrack, VelYTrack;
boolean ResetNavHold = true;

void RotateWPPath(real32 * nx, real32 * ny, real32 x, real32 y) {
	static real32 wpS = 0.0f;
	static real32 wpC = 1.0f;
	real32 HR, NorthDiff, EastDiff;

	if (CurrWPNo != PrevWPNo) {
		NorthDiff = WP.Pos[NorthC] - NorthP;
		EastDiff = WP.Pos[EastC] - EastP;

		NorthP = WP.Pos[NorthC];
		EastP = WP.Pos[EastC];

		HR = sqrtf(Sqr(EastDiff) + Sqr(NorthDiff));
		if (HR > 0.1f) {
			HR = 1.0f / HR;
			wpS = EastDiff * HR;
			wpC = NorthDiff * HR;
		}
		PrevWPNo = CurrWPNo;
		F.CrossTrackActive = true;
	}

	*nx = x * wpC + y * wpS;
	*ny = -x * wpS + y * wpC;

} // RotateWPPath


real32 Aerosonde(void) {
	// "Lateral Track Control Law for Aerosonde UAV", M. Niculescu,
	// Paper 16, AIAA, 8-11 January 2001, Reno, NV
	real32 DesYawRate;

	RotateWPPath(&PosXTrack, &PosYTrack, Nav.PosE[NorthC], Nav.PosE[EastC]);
	RotateWPPath(&VelXTrack, &VelYTrack, Nav.Vel[NorthC], Nav.Vel[EastC]);

	DesYawRate = (0.2f * PosXTrack * VelYTrack - PosYTrack * VelXTrack)
			* 0.0025;

	return (Limit1(DesYawRate, NAV_YAW_MAX_SLEW_RAD_S));

} // Aerosonde

void CaptureWPHeading(void) {

	if (CurrWPNo != PrevWPNo) {
		Nav.OriginalWPBearing = Nav.WPBearing;
		PrevWPNo = CurrWPNo;
		F.CrossTrackActive = true;
	}

} // CaptureWPHeading

boolean UseCrossTrack(real32 DiffHeading) {

	return (((NavState == Transiting) || (NavState == AcquiringAltitude)
			|| (NavState == ReturningHome)) && (Nav.WPDistance
			> NV.Mission.ProximityRadius * 2.0f) && (Abs(MakePi(DiffHeading))
			< DegreesToRadians(45)));
} // UseCrossTrack


void CompensateMulticopterCrossTrackError1D(void) {
	real32 DiffHeading;

	CaptureWPHeading();

	DiffHeading = Nav.WPBearing - Nav.OriginalWPBearing;
	if (UseCrossTrack(DiffHeading)) {
		Nav.CrossTrackE = sinf(DiffHeading) * Nav.WPDistance;
		Nav.CrossTrackCorr = Nav.CrossTrackE * Nav.CrossTrackKp;
	} else {
		Nav.OriginalWPBearing = Nav.WPBearing; // safety
		F.CrossTrackActive = false;
		Nav.CrossTrackCorr = Nav.CrossTrackE = 0.0f;
	}

} // CompensateMulticopterCrossTrackError1D


void CompensateCrossTrackError1D(void) {
	real32 DiffHeading;

	CaptureWPHeading();

	DiffHeading = Nav.WPBearing - Nav.OriginalWPBearing;
	if (UseCrossTrack(DiffHeading)) {
		Nav.CrossTrackE = sinf(DiffHeading) * Nav.WPDistance;
		Nav.WPBearing
				+= Limit1(Nav.CrossTrackE * Nav.CrossTrackKp, DegreesToRadians(30));
		Nav.WPBearing = Make2Pi(Nav.WPBearing);
	} else {
		Nav.OriginalWPBearing = Nav.WPBearing; // safety
		F.CrossTrackActive = false;
		Nav.CrossTrackE = 0.0f;
	}

} // CompensateCrossTrackError1D

void CheckProximity(void) {

	if (GPSType == UBXBinGPS)
		F.WayPointCentred = IsFixedWing ? Nav.WPDistance
				< NV.Mission.ProximityRadius : Nav.WPDistance < (GPS.hAcc
				* 5.0f);
	else
		F.WayPointCentred = Nav.WPDistance < NV.Mission.ProximityRadius;

	F.WayPointAchieved = F.WayPointCentred && (Abs(DesiredAltitude - Altitude)
			< NV.Mission.ProximityAltitude);
} // CheckProximity

void DecayPosCorr(void) {
	static uint32 LastUpdateuS = 0;
	real32 dT, Decay;
	int32 a;

	dT = dTUpdate(uSClock(), &LastUpdateuS);
	Decay = NAV_CORR_DECAY * dT;

	for (a = Pitch; a <= Yaw; a++) {
		A[a].NavCorr = DecayX(A[a].NavCorr, Decay);
		Nav.CorrP[a] = Nav.VelEP[a] = Nav.VelIntE[a] = 0.0f;
	}

	F.WayPointAchieved = F.WayPointCentred = false;
} // DecayPosCorr

void DoOrbit(real32 Radius, real32 OrbitVelocity) {
	real32 TangentialVelocity;

	TangentialVelocity = (Nav.WPDistance - Radius) * Nav.O.Kp
			* EffNavSensitivity;

	Rotate(&Nav.DesVel[NorthC], &Nav.DesVel[EastC], TangentialVelocity,
			OrbitVelocity, -Heading);

} // DoOrbit


void ComputeRelVelocity2D(int32 a) {
	// use position difference to compute velocity when travelling slowly
	// including close to WP
	real32 D;

	if (Nav.WPDistance < NV.Mission.ProximityRadius)
		Nav.PosE[a] = SlewLimitLPFilter(Nav.PosEP[a], Nav.PosE[a], 5.0f,
				Nav.LPFCutOffHz, NavdT);

	D = Nav.PosEP[a] - Nav.PosE[a];
	Nav.PosEP[a] = Nav.PosE[a];

	// GPS velocity only useful at higher speeds
	Nav.Vel[a] = Abs(GPS.gspeed) < 4.0f ? D * NavdTR : SlewLimitLPFilter(
			Nav.VelP[a], Nav.Vel[a], 10.0f, Nav.LPFCutOffHz, NavdT);
	Nav.VelP[a] = Nav.Vel[a];

	Nav.Vel[a] = Threshold(Nav.Vel[a], 0.1f);

} // ComputeRelVelocity

real32 NavCorr[2];

real32 WPDistance(WPStruct * W) {
	real32 NorthE, EastE;

	NorthE = W->Pos[NorthC] - Nav.Pos[NorthC];
	EastE =  W->Pos[EastC] - Nav.Pos[EastC];

	return sqrtf(Sqr(EastE) + Sqr(NorthE));

} // WPDistance

void Navigate(WPStruct * W) {
	int32 a;
	real32 Pp, Pv, Iv, KpEff, KiEff;
	real32 POIEastDiff, POINorthDiff, POIDistance;
	static boolean Saturating[2] = { false };
	real32 VelScale[2];

	NavdT = dTUpdate(uSClock(), &LastNavUpdateuS);
	NavdTR = 1.0f / NavdT;

	EffNavSensitivity
			= Limit(Nav.Sensitivity - NAV_SENS_THRESHOLD_STICK, 0.0f, 1.0f);
	// this gives taper radius as MaxVel / EffNavSensitivity typically 3/0.125 24M

	Nav.Desired[NorthC] = W->Pos[NorthC];
	Nav.Desired[EastC] = W->Pos[EastC];

	Nav.PosE[NorthC] = Nav.Desired[NorthC] - Nav.Pos[NorthC];
	Nav.PosE[EastC] = Nav.Desired[EastC] - Nav.Pos[EastC];

	Nav.WPDistance = sqrtf(Sqr(Nav.PosE[EastC]) + Sqr(Nav.PosE[NorthC]));
	Nav.WPBearing = Make2Pi(atan2f(Nav.PosE[EastC], Nav.PosE[NorthC]));

	if (ResetNavHold) {
		ResetNavHold = F.RapidDescentHazard = F.WayPointAchieved = F.WayPointCentred
				= false;
		Nav.VelocityLimit = NAV_MIN_VEL_MPS;
		for (a = NorthC; a <= EastC; a++) {
			Nav.VelIntE[a] = Nav.VelP[a] = 0.0f;
			Nav.PosEP[a] = Nav.PosE[a];
		}
	}

	CompensateCrossTrackError1D();

	CheckProximity();

	if ((EffNavSensitivity > 0.0f)) {

		KpEff = Nav.I.Kp * EffNavSensitivity;
		KiEff = Limit(0.2061 * KpEff - 0.0104f, 0.0f, Nav.I.Ki);

		if (IsFixedWing) {

			A[Pitch].NavCorr = A[Yaw].NavCorr = 0.0f;
			//Nav.DesiredHeading = MakePi(Nav.WPBearing);

		} else {

			Nav.VelocityLimit // TODO: questionable given slew limiting on corrections?
					= Limit(Nav.VelocityLimit + 0.25f * NavdT, NAV_MIN_VEL_MPS, Nav.MaxVelocity);

			if (F.RapidDescentHazard)
				DoOrbit(DESCENT_RADIUS_M, DESCENT_VELOCITY_MPS);
			else {
				if (F.OrbitingWP)
					DoOrbit(W->OrbitRadius, W->OrbitVelocity);
			}

			VelScale[NorthC] = Abs(cosf(Nav.WPBearing));
			VelScale[EastC] = Abs(sinf(Nav.WPBearing));

			for (a = NorthC; a <= EastC; a++) {
				// Position
				Pp = F.OrbitingWP || F.RapidDescentHazard ? Nav.DesVel[a] : Nav.PosE[a]
						* Nav.O.Kp; // radius is MaxVel/Kp

				Nav.DesiredVel = Limit1(Pp, Nav.VelocityLimit * VelScale[a]);

				// Velocity
				ComputeRelVelocity2D(a);

				Nav.VelE[a] = Nav.DesiredVel - Nav.Vel[a];
				Nav.VelE[a] = SlewLimit(Nav.VelEP[a], Nav.VelE[a],
						NAV_MAX_ACC_MPSPS, NavdT);
				Nav.VelEP[a] = Nav.VelE[a];

				Pv = Nav.VelE[a] * KpEff;

				Nav.VelIntE[a] += Nav.VelE[a] * KiEff * NavdT;
				Nav.VelIntE[a]
						= Limit1(Nav.VelIntE[a], Nav.MaxAngle * VelScale[a]);

				Iv = Nav.VelIntE[a];

				NavCorr[a] = Pv + Iv;
				Saturating[a] = Abs(NavCorr[a]) > Nav.MaxAngle; // for info!
				if (Saturating[a])
					NavCorr[a] = Limit1(NavCorr[a], Nav.MaxAngle);

				NavCorr[a] = SlewLimit(Nav.CorrP[a], NavCorr[a],
						NAV_ATTITUDE_SLEW_RAD_S, NavdT);
				Nav.CorrP[a] = NavCorr[a];
			}

			A[Yaw].NavCorr = 0.0f;

			F.NavSaturation = Saturating[Pitch] || Saturating[Roll];

			Rotate(&A[Pitch].NavCorr, &A[Roll].NavCorr, -NavCorr[NorthC],
					NavCorr[EastC], -Heading);

			if (F.OrbitingWP || F.RapidDescentHazard)
				Nav.DesiredHeading = Nav.WPBearing;
			else {
				if (F.UsingPOI) {
					POIEastDiff = POI.Pos[EastC] - Nav.Pos[EastC];
					POINorthDiff = POI.Pos[NorthC] - Nav.Pos[NorthC];

					POIDistance = sqrtf(Sqr(POIEastDiff) + Sqr(POINorthDiff));
					Nav.DesiredHeading = (POIDistance
							> (NV.Mission.ProximityRadius * 2.0f)) ? atan2f(
							POIEastDiff, POINorthDiff) : Heading;
				} else {

					// Manual yaw control only

				}
			}
		}
	} else
		DecayPosCorr();

} // Navigate


void InitNavigation(void) {
	int32 a;
	//gke
	//DEFINITELY not memset(&Nav, 0, sizeof(NavStruct));

	for (a = Pitch; a <= Yaw; a++)
		A[a].NavCorr = Nav.CorrP[a] = Nav.VelP[a] = Nav.VelEP[a]
				= Nav.VelIntE[a] = 0.0f;

	Nav.Elevation = Nav.Bearing = Nav.Distance = Nav.TakeoffBearing
			= Nav.WPDistance = Nav.WPBearing = Nav.CrossTrackE = 0.0f;

	if (!F.OriginValid || F.Emulation) {
		GPS.OriginRaw[NorthC] = DEFAULT_HOME_LAT;
		GPS.OriginRaw[EastC] = DEFAULT_HOME_LON;
		GPS.longitudeCorrection = DEFAULT_LON_CORR;
		if (F.Emulation)
			GenerateNavTestMission();
	} else {
		NV.Mission.NoOfWayPoints = 0;
		NV.Mission.OriginAltitude = OriginAltitude;
		NV.Mission.RTHAltHold = (int16) (NV.P[CurrPS][NavRTHAlt]); // ??? not used
	}

	NavState = PIC;

	POI.Pos[EastC] = POI.Pos[NorthC] = 0.0f;

	AttitudeHoldResetCount = 0;
	F.OriginValid = F.NavigationEnabled = F.NavigationActive
			= F.CrossTrackActive = F.WayPointAchieved = F.WayPointCentred
					= F.NewNavUpdate = false;

	A[Pitch].NavCorr = A[Roll].NavCorr = 0.0f;

	F.OrbitingWP = F.RapidDescentHazard = F.UsingPOI = false;
	CurrWPNo = 0;
	PrevWPNo = 255;
	NorthP = EastP = 0.0f; // origin
	RefreshNavWayPoint();
	DesiredAltitude = 0.0f;

} // InitNavigation


