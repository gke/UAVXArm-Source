// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/


#include "UAVX.h"

real32 AltitudeP;
real32 BaroVariance = 0.35f;
real32 AccUVariance = 2.0f;
real32 EstAccUBias = 0.0f;
real32 TrackBaroVariance;
real32 TrackAccUVariance;

real32 m00 = 1.0f;
real32 m01 = 0.0f;
real32 m10 = 0.0f;
real32 m11 = 1.0f;


/**
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <robin.lilja@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. - Robin Lilja
 *
 * @file Altkf.cpp
 * @author Robin Lilja
 * @date 23 Jul 2015
 */

real32 KFROC = 0.0f;
real32 KFDensityAltitude = 0.0f;
real32 kg0, kg1;
real32 pp00, pp01, pp10, pp11;
real32 h, v;
real32 Qaccel;

void AltitudeKF2(real32 Alt, real32 AccU, real32 RAlt, const real32 dT) {

	real32 dT2 = dT * dT;

	h = h + v * dT + 0.5f * AccU * dT2;
	v = v + AccU * dT;

	real32 QacceldT2 = Qaccel * dT2;

	pp00 = pp00 + (pp10 + pp01 + (pp11 + 0.25f * QacceldT2) * dT) * dT;
	pp01 = pp01 + (pp11 + 0.5f * QacceldT2) * dT;
	pp10 = pp10 + (pp11 + 0.5f * QacceldT2) * dT;
	pp11 = pp11 + QacceldT2;

	real32 y = Alt - h;
	real32 Sinv = 1.0f / (pp00 + RAlt);
	real32 kg0 = pp00 * Sinv;
	real32 kg2 = pp10 * Sinv;

	h += kg0 * y;
	v += kg1 * y;

	pp00 = pp00 - kg0 * pp00;
	pp01 = pp01 - kg0 * pp01;
	pp10 = pp10 - kg1 * pp00;
	pp11 = pp11 - kg1 * pp01;

} // AltitudeKF2


// Kalman

// https://shepherdingelectrons.blogspot.com/2017/06/height-and-vertical-velocity-kalman.html


void AltitudeKF(real32 Alt, real32 AccU, real32 dT) {
#define K_ACC_UP 0.001f
	const real32 q00 = 0.5f * AccUVariance * (dT * dT * dT * dT);
	const real32 q01 = 0.5f * AccUVariance * (dT * dT * dT);
	const real32 q10 = 0.5f * AccUVariance * (dT * dT * dT);
	const real32 q11 = AccUVariance * (dT * dT);

	real32 Ka;
	real32 ps0, ps1, cse;
	real32 pp00, pp01, pp10, pp11;
	real32 inov, icR, kg0, kg1;
	real32 Acceleration;

	Ka = K_ACC_UP * AccConfidence;
	EstAccUBias = Limit1(EstAccUBias * (1.0f - Ka) + AccU * Ka , 2.0f); // was 0.05f

#if defined(USE_ACC_UP_BIAS)
	Acceleration = AccU - EstAccUBias;
#else
	Acceleration = AccU;
#endif

	ps0 = KFDensityAltitude + KFROC * dT + 0.5f * Acceleration * Sqr(dT);
	ps1 = KFROC + Acceleration * dT;

	cse = m11 * dT;
	pp01 = m01 + cse + q01;

	pp10 = m10 + cse;
	pp00 = m00 + (m01 + pp10) * dT + q00;
	pp10 += q10;
	pp11 = m11 + q11;

	inov = Alt - ps0;
	icR = 1.0f / (pp00 + BaroVariance);

	kg0 = pp00 * icR;
	kg1 = pp10 * icR;

	KFDensityAltitude = ps0 + kg0 * inov;
	KFROC = ps1 + kg1 * inov;

	m00 = pp00 * (1.0f - kg0);
	m01 = pp01 * (1.0f - kg0);
	m10 = pp10 - pp00 * kg1;
	m11 = pp11 - pp01 * kg1;

} // AltitudeKF


//========================================================================================

/**
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <robin.lilja@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. - Robin Lilja
 *
 * @file altitude_cpp
 * @author Robin Lilja
 * @date 23 Jul 2015
 */

// A linear Kalman filter estimator of altitude and vertical velocity.


void AltitudeKFLilja(real32 Alt, real32 AccZ, real32 dT) {
	real32 pp00, pp01, pp10, pp11, ps0, ps1, cse;

	// Propagate

	// The state vector is defined as x = [h v]' where  'h' is altitude above ground and 'v' velocity, both
	// aligned with the vertical direction of the Earth NED frame, but positive direction being upwards to zenith.

	// State-space system model 'x_k = A*x_k-1 + B*u_k is given by:
	//
	//	x_k = [ h_k ] = [ 1 dT ] * [ h_k-1 ] + [ 1/2*dT^2 ] * u_k
	//  	      [ v_k ]   [ 0  1 ]   [ v_k-1 ]   [ dT       ]
	//
	//			   A			     B
	//
	// where 'u_k' is our acceleration input signal.

	// Propagation of the state (equation of motion) by Euler integration

	ps0 = KFDensityAltitude + KFROC * dT + 0.5f * AccZ * Sqr(dT);
	ps1 = KFROC + AccZ * dT;

	// The "a priori" state estimate error covariance 'P_k|k-1 = A * P_k-1 * A' + Q_k' is calculated as follows:
	//
	// P_k|k-1 = [ 1 dT ] * P_k-1 * [  1 0 ] + Q_k
	//	     [ 0  1 ]	        [ dT 1 ]

	// The process noise covariance matrix 'Q' is a bit trickier to derive, but consider some additive noise 'w_k' perturbing the
	// true acceleration 'a_k', thus the input signal is 'u_k = a_k + w_k'. The affect of 'w_k' on the state estimate is by linearity
	// described by [1/2*dT^2 dT]' i.e. the input matrix 'B'. We call this new matrix 'G'.
	//
	// Then, by definition* 'Q' equals 'G * G' * ﾏタ2', which in our case translates into:
	//
	// Q_k = G_k * G'_k * ﾏダaccelerometer^2 = [(dT^4)/4 (dT^3)/2] * ﾏダaccelerometer^2
	//					  [(dT^3)/2     dT^2]
	//
	// * I only get half of the math showing 'Q = G * G' * ﾏタ2', so I hide myself behind 'by definition'.

	// Calculate the state estimate covariance
	//

	cse = 0.5f * AccUVariance * Sqr(dT);

	pp00 = m00 + (m10 + m01 + (m11 + 0.5f * cse) * dT) * dT;
	pp01 = m01 + (m11 + cse) * dT;
	pp10 = m10 + (m11 + cse) * dT;
	pp11 = m11 + AccUVariance * Sqr(dT);

	// Update

	// Observation vector 'zhat' from the current state estimate:
	//
	// zhat_k = [ 1 0 ] * [ h_k ]
	//                    [ v_k ]
	//             H

	// 'H' is constant, so its time instance I'm using below is a bit ambitious.
	// The innovation (or residual) is given by 'y = z - zhat', where 'z' is the actual observation i.e. measured state.
	// Calculate inovation, in this particular case we observe the altitude state directly by an altitude measurement
	real32 y = Alt - ps0;

	// The inovation covariance is defined as 'S_k = H_k * P_k|k-1 * H'_k + R_k', for this particular case
	// 'H_k * P_k|k-1 * H'_k' is equal to the first row first column element of 'P_k|k-1' i.e. P_00.

	// The Kalman gain equals 'K_k = P_k|k-1 * H'_k * S_k^-1', where
	//
	// P_k|k-1 * H'_k = [ P_00 ]
	//                  [ P_10 ]
	//
	// and 'S_k^-1' equals '1/S_k' since 'S_k^-1' is being a scalar (that is a good thing!).

	// Calculate the inverse of the inovation covariance
	real32 Sinv = 1.0f / (pp00 + BaroVariance);

	// Calculate the Kalman gain
	real32 K0 = pp00 * Sinv;
	real32 K1 = pp10 * Sinv;

	// Update the state estimate
	KFDensityAltitude = ps0 + K0 * y;
	KFROC = ps1 + K1 * y;

	// The "a posteriori" state estimate error covariance equals 'P_k|k = (I - K_k * H_k) * P_k|k-1', where
	//
	//  (I - K_k * H_k) = ( [ 1 0 ] - [ K_0 ] * [ 1 0 ] ) = [ (1-K_0) 0  ] , thus
	//                    ( [ 0 1 ]   [ K_1 ]           )   [ -K_1    1  ]
	//
	//  P_k|k = (I - K_k * H_k) * P_k+1|k = [ (1-K_0) 0 ] * [ P_00 P_01 ] = [ (1-K_0)*P_00       (1-K_0)*P_01       ]
	//					[ -K_1    1 ]   [ P_10 P_00 ]   [ (-K_1*P_00 + P_10) (-K_1*P_01 + P_00) ]

	// Calculate the state estimate covariance
	m00 = pp00 - K0 * pp00;
	m01 = pp01 - K0 * pp01;
	m10 = pp10 - K1 * pp00;
	m11 = pp11 - K1 * pp01;

} // AltitudeKFLilja


//______________________________________________________________________

// place holder for Baro/GPS fusion ;).

real32 kfVar[4] = { 0.2f, 0.4f, 0, 0 };

// 3x3 State Covariance matrix
real32 p[4][4] = { { 1, 0, 0, 0 }, //
		{ 0, 1, 0, 0 }, //
		{ 0, 0, 100, 0 }, //
		{ 0, 0, 0, 100 } };

real32 kfS[4] = {0,0,0,0};

real32 kfGain[4] = {1,1,1,1};

void InitAltitudeKF3V(void) {

	//v0 = v1 = v2 = AccZ = 0.0f;

} // InitAltitudeFilters


void AltitudeKF4V(real32 Alt, real32 RFAlt, real32 GPSAlt, real32 AccZ,
		real32 dT) {
	const idx n = 4;
	enum {
		alt, roc, baroE, gpsE
	};
	idx i, j;

	real32 kfPS[n];

	real32 dT2On2 = Sqr(dT) * 0.5f;
	real32 dT3On2 = dT2On2 * dT;
	real32 dT4On4 = dT2On2 * dT2On2;


#if defined(FULL_FUSE)
	for (i = 0; i<4; i++)
		TxVal32(TelemetrySerial, kfS[i] * 100.0f, 2,',');
	TxNextLine(TelemetrySerial);
#endif

	// Predict state

	kfPS[alt] = kfS[alt] + kfS[roc] * dT + AccZ * dT2On2;
	kfPS[roc] = kfS[roc] + AccZ * dT;

	kfPS[baroE] = kfS[baroE];
	kfPS[gpsE] = kfS[gpsE];

	// Predict State Covariance matrix
	real32 t[n][n];

	t[alt][alt] = p[alt][alt] + p[alt][roc] * dT - p[baroE][alt] * dT2On2;
	t[alt][roc] = p[alt][roc] + p[roc][roc] * dT - dT2On2 * p[baroE][roc];
	t[alt][baroE] = p[roc][baroE] + p[roc][baroE] * dT - p[baroE][baroE]
			* dT2On2;
	t[alt][gpsE] = p[roc][gpsE] + p[roc][gpsE] * dT - p[gpsE][gpsE] * dT2On2;

	t[roc][alt] = p[roc][alt] - p[baroE][alt] * dT;
	t[roc][roc] = p[roc][roc] - p[baroE][roc] * dT;
	t[roc][baroE] = p[roc][baroE] - p[baroE][baroE] * dT;
	t[roc][gpsE] = p[roc][gpsE] - p[baroE][gpsE] * dT;

	t[baroE][alt] = p[baroE][alt];
	t[baroE][roc] = p[baroE][roc];
	t[baroE][baroE] = p[baroE][baroE];
	t[baroE][gpsE] = p[baroE][gpsE];

	t[gpsE][alt] = p[gpsE][alt];
	t[gpsE][roc] = p[gpsE][roc];
	t[gpsE][baroE] = p[gpsE][baroE];
	t[gpsE][gpsE] = p[gpsE][gpsE];

	//__________________________________________________


	p[alt][alt] = t[alt][alt] + t[alt][roc] * dT - t[alt][baroE] * dT2On2;
	p[alt][roc] = t[alt][roc] - t[alt][baroE] * dT;
	p[alt][baroE] = t[alt][baroE];
	p[alt][gpsE] = t[alt][gpsE];

	p[roc][alt] = t[roc][alt] + t[roc][roc] * dT - t[roc][baroE] * dT2On2;
	p[roc][roc] = t[roc][roc] - t[roc][baroE] * dT;
	p[roc][baroE] = t[roc][baroE];
	p[baroE][gpsE] = t[roc][baroE];

	p[baroE][alt] = t[baroE][alt] + t[baroE][roc] * dT - t[baroE][baroE]
			* dT2On2;
	p[baroE][roc] = t[baroE][roc] - t[baroE][baroE] * dT;
	p[baroE][baroE] = t[baroE][baroE];
	p[baroE][gpsE] = t[baroE][gpsE];

	p[gpsE][alt] = t[gpsE][alt] + t[gpsE][roc] * dT - t[gpsE][gpsE]
	                                                 			* dT2On2;
	p[gpsE][roc] = t[gpsE][roc] - t[gpsE][gpsE] * dT;;
	p[gpsE][baroE] = t[gpsE][baroE];
	p[gpsE][gpsE] = t[gpsE][gpsE];

	//__________________________________________________

	p[alt][alt] += dT4On4 * BaroVariance;
	p[alt][roc] += dT3On2 * BaroVariance;

	p[roc][roc] += dT3On2 * BaroVariance;
	p[roc][roc] += Sqr(dT) * BaroVariance;

	p[baroE][baroE] += kfVar[baroE];
	p[gpsE][gpsE] += kfVar[gpsE];

	// Error
	real32 inov = Alt - kfPS[alt];
	real32 sInv = 1.0f / (p[alt][alt] + kfVar[alt]);

	// Kalman gains
	kfGain[alt] = p[alt][alt] * sInv;
	kfGain[roc] = p[alt][roc] * sInv;
	kfGain[baroE] = p[alt][baroE] * sInv;
	kfGain[gpsE] = p[alt][gpsE] * sInv;

	// Update state
	for (i = 0; i < n; i++)
		kfS[i] += kfGain[i] * inov;

	// Update state covariance matrix
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			p[i][j] -= kfGain[i] * p[i][j];


} // AltitudeKF3V

//______________________________________________________________

// https://timdelbruegger.wordpress.com/2016/01/05/altitude-sensor-fusion/
// Reads Barometer + ultrasonic sensor + GPS and fuses them with linear accelerations to gather good knowledge of
//the height above ground and the (world space) vertical speed.


// Initial state vector X
// We assume to be on the ground with speed zero
real32 x[4] = { 0, 0, 100, 100 };

// Covariance matrix at k-1
// We set the initial probability distribution to be quite confident in the first two state dimensions and very
// unsure in the GPS / Barometer ground Es:
real32 kfP[4][4] = { { 0.1f, 0, 0, 0 }, //
		{ 0, 0.1f, 0, 0 }, //
		{ 0, 0, 10000.0f, 0 }, //
		{ 0, 0, 0, 10000.0f } };

// Q: predict noise covariance matrix
// The state prediction only affects height above ground and vertical speed. Since the influence of the noisy
// accelerometer reading is stronger on the vertical speed, the noise is stronger there.
real32 kfQ[4][4] = { { 0.3f, 0, 0, 0 }, //
		{ 0, 0.5f, 0, 0 }, //
		{ 0, 0, 0, 0 }, //
		{ 0, 0, 0, 0 } };

// H: measurement prediction matrix
real32 kfH[4][4] = { { 1, 0, 1, 0 }, // barometer height measurement
		{ 1, 0, 0, 0 }, // ultrasonic height measurement
		{ 1, 0, 0, 1 } }; // gps height measurement

void initKF(void) {

	// self.kf = KalmanFilter(x=x, P=P, A=F, Q=Q, B=B, H=H)

	// self.timer = Timer()
} // InitKF


void KF(real32 BaroAlt, real32 RFAlt, real32 GPSAlt, real32 AccZ, real32 dT) {
	// def update(self, attitude_state):


	// maybe we don't need this as the ultrasonic wave has some width? For now,
	// we only adjust the accuracy based on the angle
	real32 height_ultrasonic = RFAlt;

	real32 F[4][4] = { { 1, dT, 0, 0 }, //
			{ 0, 1, 0, 0 }, //
			{ 0, 0, 1, 0 }, //
			{ 0, 0, 0, 1 } };

	// B: influence of vertical acceleration on the state vector
	real32 B[4] = { 0.5f * Sqr(dT), // vertical acceleration influences the altitude quadratically
			dT,// vertical acceleration influences the vertical speed linearly
			0, 0 };// vertical acceleration does not influence GPS / barometer ground Es

	// control input
	//    u = array([AccZ])
	//    self.log.debug("U: %s", u)

	// Kalman Step 1: Predict with input

	// (x, P) = self.kf.predictWithInput(u, dt)

	// Y: measurement vector
	// TODO: we could also add the GPS climb speed measurement
	// Y = array([[BaroAlt.height_above_sea], [height_ultrasonic], [GPSAlt.altitude]])

	// R: measurement noise covariance matrix
	//  R = diag([BaroVariance, RFVariance, GPSVariance])

	// Kalman Step 2: Update with measurements

	//     (x, P) = self.kf.updateWithMeasurement(Y, R)


	//    newstate = VehicleState(attitude_state, HeightState.fromVector(x), GPSAlt, BaroAlt)


}



