// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.
//    If not, see http://www.gnu.org/licenses/

#ifndef _pinsf4v4_h
#define _pinsf4v4_h

#include "UAVX.h"

PinDef RCPins[MAX_RC_INPUTS] = {
	{ true, GPIOA, GPIO_Pin_0, GPIO_PinSource0, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM2, TIM_Channel_1, TIM_IT_CC1, 0, GPIO_AF_TIM2 }, TIM2_IRQn },//
	{ true, GPIOA, GPIO_Pin_1, GPIO_PinSource1, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM2, TIM_Channel_2, TIM_IT_CC2, 0, GPIO_AF_TIM2 }, TIM2_IRQn }, //
	{ true, GPIOA, GPIO_Pin_2, GPIO_PinSource2, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM2, TIM_Channel_3, TIM_IT_CC3, 0, GPIO_AF_TIM2 }, TIM2_IRQn }, //
	{ true, GPIOA, GPIO_Pin_3, GPIO_PinSource3, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM2, TIM_Channel_4, TIM_IT_CC4, 0, GPIO_AF_TIM2 }, TIM2_IRQn }, //
	{ true, GPIOA, GPIO_Pin_6, GPIO_PinSource6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_1, TIM_IT_CC1, 0, GPIO_AF_TIM3 }, TIM3_IRQn },//
	{ true, GPIOA, GPIO_Pin_7, GPIO_PinSource7, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_2, TIM_IT_CC2, 0, GPIO_AF_TIM3 }, TIM3_IRQn }, //
	{ true, GPIOB, GPIO_Pin_0, GPIO_PinSource0, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_3, TIM_IT_CC3, 0, GPIO_AF_TIM3 }, TIM3_IRQn },//
	{ true, GPIOB, GPIO_Pin_1, GPIO_PinSource1, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_4, TIM_IT_CC4, 0, GPIO_AF_TIM3 }, TIM3_IRQn } };

PinDef PWMPins[MAX_PWM_OUTPUTS] = {
		// Drives 1-4
	{ true, GPIOB, GPIO_Pin_9, GPIO_PinSource9, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM4, TIM_Channel_4, 0, &(TIM4->CCR4), GPIO_AF_TIM4 }}, //
	{ true, GPIOB, GPIO_Pin_8, GPIO_PinSource8, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM4, TIM_Channel_3, 0,&(TIM4->CCR3), GPIO_AF_TIM4 }}, //
	{ true, GPIOB, GPIO_Pin_7, GPIO_PinSource7, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM4, TIM_Channel_2, 0, &(TIM4->CCR2), GPIO_AF_TIM4 }}, //
	{ true, GPIOB, GPIO_Pin_6, GPIO_PinSource6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM4, TIM_Channel_1, 0, &(TIM4->CCR1), GPIO_AF_TIM4 }},
	{ true, GPIOC, GPIO_Pin_6, GPIO_PinSource6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP,
		{true, TIM8, TIM_Channel_1, 0, &(TIM8->CCR1), GPIO_AF_TIM8 }}, // optionally WS2812
	{ true, GPIOC, GPIO_Pin_7, GPIO_PinSource7, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM8, TIM_Channel_2, 0, &(TIM8->CCR2), GPIO_AF_TIM8 }},

	// Drives 4-8 for brushless
	{ true, GPIOA, GPIO_Pin_6, GPIO_PinSource6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_1, 0, &(TIM3->CCR1), GPIO_AF_TIM3 } }, //
	{ true, GPIOA, GPIO_Pin_7, GPIO_PinSource7, GPIO_Mode_AF,GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_2, 0, &(TIM3->CCR2), GPIO_AF_TIM3 } }, 
	{ true, GPIOB, GPIO_Pin_0, GPIO_PinSource0, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_3, 0, &(TIM3->CCR3), GPIO_AF_TIM3 } }, //
	{ true, GPIOB, GPIO_Pin_1, GPIO_PinSource1, GPIO_Mode_AF,GPIO_OType_PP, GPIO_PuPd_UP, 
		{true, TIM3, TIM_Channel_4, 0, &(TIM3->CCR4), GPIO_AF_TIM3 } }
};

PinDef GPIOPins[MAX_GPIO_PINS] = {
	{ true, GPIOA, GPIO_Pin_4, GPIO_PinSource4, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_UP,}, // Beeper
	{ true, GPIOC, GPIO_Pin_10, GPIO_PinSource10, GPIO_Mode_IN, GPIO_OType_PP, GPIO_PuPd_UP,}, // Armed
	{ true, GPIOC, GPIO_Pin_9, GPIO_PinSource9, GPIO_Mode_IN, GPIO_OType_PP, GPIO_PuPd_UP,}, // Landing
	{ true, GPIOA, GPIO_Pin_5, GPIO_PinSource5, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_UP,}, // Aux1
	{ true, GPIOA, GPIO_Pin_15, GPIO_PinSource15, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_UP,}, // Aux2
	{ true, GPIOC, GPIO_Pin_8, GPIO_PinSource8, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_UP,}, // Probe (Aux3)
	{ true, GPIOC, GPIO_Pin_14, GPIO_PinSource14, GPIO_Mode_IN, GPIO_OType_PP, GPIO_PuPd_UP,}, // MPU6XXXIntSel 
	{ true, GPIOC, GPIO_Pin_15, GPIO_PinSource15, GPIO_Mode_IN, GPIO_OType_PP, GPIO_PuPd_UP,} // HMC5XXXRdySel
};

PinDef WSPin = // Aux1 Pin for UAVXF4V3
	{true, GPIOC, GPIO_Pin_6, GPIO_PinSource6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_NOPULL, 
		{true, TIM8, TIM_Channel_1, TIM_DMA_CC1, &(TIM8->CCR1), GPIO_AF_TIM8 },
		{true, DMA_Channel_0, DMA2_Stream2}, DMA2_Stream2_IRQn };

PinDef LEDPins[MAX_LED_PINS] = { //
	{ true, GPIOB, GPIO_Pin_3, GPIO_PinSource3, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_NOPULL,}, // Yellow
	{ true, GPIOB, GPIO_Pin_4, GPIO_PinSource4, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_NOPULL,}, // Red
	{ true, GPIOC, GPIO_Pin_11, GPIO_PinSource11, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_NOPULL,}, // Blue
	{ true, GPIOC, GPIO_Pin_12, GPIO_PinSource12, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_NOPULL,},// Green
};

const AnalogPinDef AnalogPins[MAX_ANALOG_CHANNELS] = {			
	{ true, ADC1, GPIOC, GPIO_Pin_0, ADC_Channel_10, {true, DMA_Channel_0, DMA2_Stream0}, 1 }, // RF
	{ true, ADC1, GPIOC, GPIO_Pin_1, ADC_Channel_11, {true, DMA_Channel_0, DMA2_Stream0}, 2 }, // Current
	{ true, ADC1, GPIOC, GPIO_Pin_2, ADC_Channel_12, {true, DMA_Channel_0, DMA2_Stream0}, 3 }, // Volts

	{ false, 0, }, // Roll
	{ false, 0, }, // Pitch
	{ false, 0, } // Yaw
};

SerialPortDef SerialPorts[MAX_SERIAL_PORTS] = { // Tx, Rx
	{false, }, // mapped to usbSerial
	{true, USART1, //  Connector 5 Telemetry 
		GPIO_AF_USART1, GPIOA, GPIO_Pin_9, GPIO_PinSource9, GPIO_Pin_10, GPIO_PinSource10, 
		true, USART1_IRQn,
		false, DMA_Channel_4, DMA2_Stream7, DMA2_Stream7_IRQn, DMA2_Stream5, 115200 }, //
	{true, USART2, // Connector 1 Serial Rx
		GPIO_AF_USART2, GPIOA, GPIO_Pin_2, GPIO_PinSource2, GPIO_Pin_3, GPIO_PinSource3, 
		true, USART2_IRQn, 
		false, DMA_Channel_4, DMA1_Stream6, DMA1_Stream6_IRQn, DMA1_Stream5, 9600 }, //
	{true, USART3, // Connector 2 GPS shared with I2C2
		GPIO_AF_USART3, GPIOB, GPIO_Pin_10, GPIO_PinSource10, GPIO_Pin_11, GPIO_PinSource11, 
		true, USART3_IRQn, 
		false, DMA_Channel_4, DMA1_Stream3, DMA1_Stream3_IRQn, DMA1_Stream1, 115200 }, //
	{false, UART4, 0 }, //
	{false, 0 } // SoftSerial
};

PinDef SPISelectPins[MAX_SPI_DEVICES] = {
	{ true, GPIOB, GPIO_Pin_12, GPIO_PinSource12, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_UP, }, // imu0Sel
	{ false, }, // imu1Sel
	{ true, GPIOC, GPIO_Pin_5, GPIO_PinSource5, GPIO_Mode_OUT,GPIO_OType_PP, GPIO_PuPd_UP,}, // baroSel
	{ true, GPIOC, GPIO_Pin_4, GPIO_PinSource4, GPIO_Mode_OUT,GPIO_OType_PP, GPIO_PuPd_UP,}, // magSel
	{ true, GPIOC, GPIO_Pin_3, GPIO_PinSource3, GPIO_Mode_OUT,GPIO_OType_PP, GPIO_PuPd_UP,}, // memSel
	{ false, }, //
	{ false, }, //		
	{ false, }, //								
};

PinDef USBDisconnectPin = { false, 0, };

const uint8 currGimbalType = noGimbal;
const boolean ledsLowOn = true;

// imu0Sel, imu1Sel, baroSel, magSel, memSel, gpsSel, rfSel, asSel, flowSel, escSel, 
const DevDef busDev[] = {
	{ true, mpu6000IMU, useSPI, 2,}, // imu0Sel
	{ false, },// imu1Sel 
	{ true, ms5611Baro, useSPI, 2,}, // baroSel
	{ true, hmc5xxxMag, useSPI, 2,}, // magSel 
	{ true, spiFlashMem, useSPI, 2,}, // memSel 
	{ false, }, // gpsSel
	{ false, }, // rfSel
	{ false, }, // asSel,
	{ false, }, // flowSel
	{ false, }, // escSel
};

void InitTarget(void) {

	InitSerialPort(Usart1, true, false);

	switch (CurrRxType) {
	case CPPMRx:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 10;
		CurrNoOfRCPins = 1;
		RxUsingSerial = false;
		break;
	case ParallelPPMRx:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 6;
		CurrNoOfRCPins = MAX_RC_INPUTS; //P(RCChannels);
		RxUsingSerial = false;
		break;
	default:
		CurrMaxPWMOutputs = (UsingDCMotors) ? 4 : 10;
		CurrNoOfRCPins = 0;
		RxUsingSerial = true;
		RCSerial = Usart2;
		InitSerialPort(RCSerial, false, CurrRxType == FutabaSBusRx);
		break;
	} // switch
	
	GPSRxSerial = GPSTxSerial = Usart3;
	InitSerialPort(GPSRxSerial, false, false); 

	if (CurrwsNoOfLeds > 0) // temporary KLUDGE - need to remap gimbal function
		CurrMaxPWMOutputs = 4;

} // uavxf4v4Init
#endif

