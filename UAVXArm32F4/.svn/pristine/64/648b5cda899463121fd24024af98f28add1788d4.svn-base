// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

#include "UAVX.h"

Flags F;
uint8 State, StateP;

boolean FirstIMU;
timeuS FlightTimemS = 0;

timeuS CurrPIDCycleuS = PID_CYCLE_2000US;
real32 CurrPIDCycleS;

uint8 ch;
int8 i, m;

void InitMisc(void) {
	idx i;

	State = Preflight;

	for (i = 0; i < FLAG_BYTES; i++)
		F.AllFlags[i] = 0;

	for (i = 0; i < mSLastArrayEntry; i++)
		mS[i] = 0;

	for (i = 0; i < uSLastArrayEntry; i++)
		uS[i] = 0;

	InitialThrottle = ThrNeutral = ThrLow = ThrHigh = 1.0f;
	IdleThrottle = FromPercent(10);

} // InitMisc


void DoHouseKeeping(void) {

	CheckBatteries();
	CheckAlarms();
	DoCalibrationAlarm();

	CheckTelemetry(TelemetrySerial);
	UpdateWSLEDs();

} // DoHousekeeping

void ResetMainTimeouts(void) {

	mSTimer(CrashedTimeout, CRASHED_TIMEOUT_MS);
	mSTimer(ArmedTimeout, ARMED_TIMEOUT_MS);
	mSTimer(RxFailsafeTimeout, RC_NO_CHANGE_TIMEOUT_MS);

} // ResetMainTimeouts


int main() {
	static timeuS LastUpdateuS = 0;

	InitClocks();
	Delay1mS(1000);

	InitMisc();

	LoadParameters();
	InitHarness();

	SendDefAFNameNames(TelemetrySerial);

	InitLEDs();
	InitWSLEDs();

	InitExtMem();
	InitPollRxPacket();
	SPIClearSelects();

	//CheckBLHeli();

	InitIMU(imuSel);
	InitMagnetometer();
	InitMadgwick();
	InitBarometer();
	InitTemperature();

	InitEmulation();

	DoTesting(); // if any - does not exit

	InitControl();
	InitNavigation();

	LEDsOff();

	if (GPSRxSerial != TelemetrySerial)
		InitGPS();

	EnableRC();

	uSTimer(NextCycleUpdate, CurrPIDCycleuS);

	FirstPass = true;
	State = StateP = Preflight;

	while (true) {

		tickCountsEnabled = State == InFlight;
		tickCountOn(FlightTick);

		if ((UAVXAirframe == Instrumentation) || (UAVXAirframe == IREmulation)) {

			F.Signal = true;
			StickThrottle = 0.0f;
			RCStart = 0;
			//F.ThrottleOpen = F.Navigate = F.ReturnHome = false;

		} else {

			CheckRCLoopback();
			UpdateControls(); // avoid loop sync delay

			if (State == Launching) // Placed here to defeat RC controls KLUDGE!
				OverrideSticks();

		}

		if (UseGyroOS) {
			FirstIMU = true;
			do {
				if (MPU6XXXReady(imuSel)) {
					Probe(1);
					tickCountOn(IMUTick);
					if (FirstIMU)
						ReadFilteredGyroAndAcc(imuSel);
					else
						ReadGyro(imuSel);
					FirstIMU = false;
					tickCountOff(IMUTick);
					Probe(0);
				}
			} while (!uSTimeout(NextCycleUpdate));
		}

		if (UseGyroOS || uSTimeout(NextCycleUpdate)) {
			uSTimer(NextCycleUpdate, CurrPIDCycleuS);

			Probe(1);

			dT = dTUpdate(&LastUpdateuS);
			dTOn2 = 0.5f * dT;
			dTR = 1.0f / dT;
			dTROn2 = dTR * 0.5f;

			UpdateDrives(); // from previous cycle - one cycle lag minimise jitter
			UpdateInertial();

			DoHouseKeeping();

			switch (State) {
			case Preflight:

				F.HoldingAlt = F.IsArmed = false;
				DesiredThrottle = 0.0f;
				ZeroThrottleCompensation();

				StopDrives();

				if (FailPreflight()) {
					LEDOn(ledRedSel);
					LEDOff(ledGreenSel);
				} else {

					LEDOff(ledRedSel);
					LEDOn(ledGreenSel);

					DoBeep(8, 2);

					FirstPass = F.OriginValid = F.NavigationEnabled
							= F.OffsetOriginValid = false;
					AlarmState = NoAlarms;
					InitialThrottle = StickThrottle;

					State = Ready;
				}

				break;
			case Ready:

				ResetHeading();

				if (Armed() || (UAVXAirframe == Instrumentation)) {
					LEDOn(ledYellowSel);
					RxLoopbackEnabled = false;
					State = Starting;
				} else
					DoStickProgramming();

				break;
			case Starting:

				DoBeep(8, 2);

				if (GPSRxSerial == TelemetrySerial)
					InitGPS();

				DoBeep(8, 2);
				InitBlackBox();

				InitControl();
				InitNavigation();

				if (F.UsingAnalogGyros || !UsingFastStart)
					ErectGyros(imuSel, 5);

				ZeroStats();
				F.IsArmed = true;
				mSTimer(WarmupTimeout, WARMUP_TIMEOUT_MS);

				State = Warmup;

				break;
			case Warmup:

				CaptureBatteryCurrentADCZero();

				ResetHeading();

				if (mSTimeout(WarmupTimeout)) {
					UbxSaveConfig(GPSTxSerial); //does this save ephemeris stuff?

					DoBeeps(3);
					DoBeep(8, 2);

					ResetMainTimeouts();

					LEDOff(ledYellowSel);

					State = (UAVXAirframe == IREmulation) ? IREmulate : Landed;
				}
				break;
			case Landed:
				ZeroThrottleCompensation();
				ZeroNavCorrections();

				ResetHeading();

				if (Armed() || (UAVXAirframe == Instrumentation)) {
					F.DrivesArmed = CurrESCType == DCMotorsWithIdle;
					DesiredThrottle = F.DrivesArmed ? IdleThrottle : 0.0f;

					ZeroIntegrators();

					DoStickProgramming();
					F.HoldingAlt = false;

					if (UAVXAirframe == Instrumentation) {

						CaptureHomePosition();

						CaptureBatteryCurrentADCZero();

						if (F.OriginValid) { // for now only works with GPS
							LEDsOff();
							UbxSaveConfig(GPSTxSerial);
							F.DrivesArmed = false;
							State = InFlight;
						}

					} else {

						if (mSTimeout(ArmedTimeout))
							InitiateShutdown(ArmingTimeout);
						else {

							if (F.GPSToLaunchRequired && !F.OriginValid)
								CaptureHomePosition();

							if ((StickThrottle >= IdleThrottle)
									&& ((CurrGPSType == NoGPS) || F.OriginValid
											|| !F.GPSToLaunchRequired)) {

								ResetMainTimeouts();
								setStat(RCGlitchesS, 0);
								RateEnergySum = 0.0f;
								RateEnergySamples = 0;

								UbxSaveConfig(GPSTxSerial);
								UpdateNV(); // also captures stick programming

								LEDsOff();

								F.DrivesArmed = true;
								if (F.IsFixedWing && !F.PassThru) {
									LaunchState = initLaunch;
									State = Launching;
								} else
									State = InFlight;

							} else { // continue in state "landed"

								CaptureBatteryCurrentADCZero();

							}
						}
					}
				} else
					// became disarmed mid state change
					State = Preflight;
				break;
			case Landing:
				if (StickThrottle > IdleThrottle) {

					mS[StartTime] = mSClock();
					DesiredThrottle = 0.0f;
					ResetMainTimeouts();
					F.DrivesArmed = true;

					State = InFlight;

				} else {
					if (mSClock() < mS[ThrottleIdleTimeout])
						DesiredThrottle = IdleThrottle;
					else {

						F.DrivesArmed = CurrESCType == DCMotorsWithIdle;
						DesiredThrottle = F.DrivesArmed ? IdleThrottle : 0.0f;
						ZeroThrottleCompensation(); // to catch cycles between Rx updates

						ZeroNavCorrections();
						if (NavState != Perching)
							F.OriginValid = F.OffsetOriginValid = false;

						if (Tuning) {
							// TODO: save tuning?
						}

						UpdateNV(); // also captures stick programming

						ResetMainTimeouts();

						mSTimer(ThrottleIdleTimeout, THR_LOW_DELAY_MS);
						LEDOn(ledGreenSel);

						State = Landed;
					}
				}
				break;
			case Shutdown:
				if ((StickThrottle < IdleThrottle) && !(F.ReturnHome
						|| F.Navigate)) {
					TxSwitchArmed = StickArmed = false;
					FirstPass = true; // should force fail preprocess with arming switch

					State = Preflight;

				} else
					LEDsOff();
				break;
			case Launching:
				LaunchFW();
				if (LaunchState == finishedLaunch)

					State = InFlight;

				break;
			case InFlight:
				LEDChaser();

				if (UsingOffsetHome && !F.OffsetOriginValid)
					CaptureOffsetHomePosition();

				DoNavigation();

				if (UAVXAirframe == Instrumentation) {

					if (F.NavigationEnabled)
						F.NewNavUpdate = false;

				} else { // no exit for fixed wing when using roll/yaw stick arming

					if ((StickThrottle < IdleThrottle) && (IsMulticopter
							|| (((ArmingMethod == SwitchArming)
									|| (ArmingMethod == TxSwitchArming))
									&& !Armed()))) {

						ZeroThrottleCompensation();
						mSTimer(ThrottleIdleTimeout, THR_LOW_DELAY_MS);

						State = Landing;

					} else {

						if (UpsideDownMulticopter())
							InitiateShutdown(UpsideDown);
						else {

							RateEnergySum
									+= Sqr(Abs(Rate[X]) + Abs(Rate[Y]) + Abs(Rate[Z]));
							RateEnergySamples++;

#if defined(INC_DFT)
							if (!UseGyroOS) // not enough time if OS
							DFT8(RawAcc[X], DFT);
#endif

							DoAltitudeControl();
						}
					}
				}
				if (State != InFlight)
					tickCountOff(FlightTick);
				break;
			case IREmulate:
				if (!Armed())
					State = Preflight;
				break;
			} // switch state

			StateP = State;

			setStat(UtilisationS, State == InFlight ? ((uSClock()
					- LastUpdateuS) * 100.0f) / CurrPIDCycleuS : 0);

			Probe(0);
		}

		tickCountOff(FlightTick);

	} // while true

	return (0);

} // loop


