// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// Autonomous flight routines

#include "UAVX.h"

WPStruct WP, HP, POI;
uint8 CurrWPNo = 0;

const char * NavComNames[] = { "Via", "Orbit", "Perch", "POI" };

//  North, East, Altitude, Velocity, Loiter, OrbitRadius OrbitAltitude OrbitVelocity Action

//#define NAV_LEG_LENGTH 75
#define NAV_LEG_LENGTH 150

//#define DEFAULT_HOME_LAT  (-352902889L)
//#define DEFAULT_HOME_LON  (1491109972L)

#if defined(USE_THERMAL_XXX)
const uint8 NoOfTestWayPoints = 1; // start at 1
const WPStruct TestWP[] = {
		{ {0, 0, 15}, 3, 30, 0, 0, 0, 0 },
		{ {NAV_LEG_LENGTH, 0, 50}, 3, 30, 8, 0, 2, navOrbit }
};
#else
const uint8 NoOfTestWayPoints = 4; // start at 1
const WPStruct TestWP[] = {
		{ {0, 0, 15}, 3, 30, 0, 0, 0, 0 },
		{ {0, 0, 15}, 3, 30, 0, 0, 0, navPOI },
		{ {0, 50, 15}, 3, 10, 0, 0, 0, navPerch },
		{ {NAV_LEG_LENGTH, NAV_LEG_LENGTH, 100}, 4, 1, 0, 0, 0, navVia },
		{ {NAV_LEG_LENGTH, 0, 15}, 3, 60, 8, 0, 2, navOrbit } };
#endif
void GenerateNavTestMission(void) {
	MissionStruct * M;
	real32 Scale;
	uint8 wp;

	Scale = IsMulticopter ? 1.0f : 4.0f;
	M = &NV.Mission;

	M->NoOfWayPoints = Limit(NoOfTestWayPoints, 0, NAV_MAX_WAYPOINTS);
	M->ProximityAltitude = NAV_PROXIMITY_ALTITUDE_M;
	M->ProximityRadius = IsMulticopter ? NAV_PROXIMITY_RADIUS_M :WING_PROXIMITY_RADIUS_M;
	M->OriginAltitude = OriginAltitude;
	M->OriginLatitude = GPS.OriginRaw[NorthC];
	M->OriginLongitude = GPS.OriginRaw[EastC];
	M->RTHAltHold = (int16) (NV.P[CurrPS][NavRTHAlt]); // ??? not used

	for (wp = 1; wp <= M->NoOfWayPoints; wp++) {
		M->WP[wp].LatitudeRaw = MToGPS(TestWP[wp].Pos[NorthC])* Scale + M->OriginLatitude;
		M->WP[wp].LongitudeRaw = MToGPS(TestWP[wp].Pos[EastC]) * Scale
				/ GPS.longitudeCorrection + M->OriginLongitude;
		M->WP[wp].Altitude = TestWP[wp].Pos[DownC];
		M->WP[wp].VelocitydMpS = TestWP[wp].Velocity * 10;
		M->WP[wp].Loiter = TestWP[wp].Loiter;
		M->WP[wp].OrbitRadius = (TestWP[wp].OrbitRadius) * Scale;
		M->WP[wp].OrbitAltitude = TestWP[wp].OrbitAltitude;
		M->WP[wp].OrbitVelocitydMpS = TestWP[wp].OrbitVelocity * 10;
		M->WP[wp].Action = TestWP[wp].Action;
	}

	UpdateNV();

	CurrWPNo = 0;
	RefreshNavWayPoint();

} // GenerateNavTestMission


void DisplayNavMission(uint8 s, MissionStruct * M) {
	uint8 wp;

	TxString(s, "\r\nCurrent Mission:");
	if (M->NoOfWayPoints == 0)
		TxString(s, " Empty");
	else {

		TxString(s, "\r\n#n\tPxA\tPxR\tAlt\tOLat\t\tOLon\r\n");
		TxVal32(s, M->NoOfWayPoints, 0, ASCII_HT);
		TxVal32(s, M->ProximityAltitude, 0, ASCII_HT);
		TxVal32(s, M->ProximityRadius, 0, ASCII_HT);
		TxVal32(s, M->OriginAltitude, 0, ASCII_HT);
		TxVal32(s, M->OriginLatitude, 7, ASCII_HT);
		TxVal32(s, M->OriginLongitude, 7, ASCII_HT);
		TxVal32(s, M->RTHAltHold, 0, ASCII_HT);
		TxNextLine(s);

		TxString(s,
				"#\tLat\t\tLon\t\tAlt\tVel\tLoiter\tAction\tPRad\tPAlt\tPVel\r\n");
		for (wp = 1; wp <= M->NoOfWayPoints; wp++) {
			TxVal32(s, wp, 0, ASCII_HT);
			TxVal32(s, M->WP[wp].LatitudeRaw, 7, ASCII_HT);
			TxVal32(s, M->WP[wp].LongitudeRaw, 7, ASCII_HT);
			TxVal32(s, M->WP[wp].Altitude, 0, ASCII_HT);
			TxVal32(s, M->WP[wp].VelocitydMpS, 1, ASCII_HT);
			TxVal32(s, M->WP[wp].Loiter, 0, ASCII_HT);
			TxVal32(s, M->WP[wp].Action, 0, ASCII_HT);
			if (M->WP[wp].Action == navPOI) {
				TxVal32(s, M->WP[wp].OrbitRadius, 0, ASCII_HT);
				TxVal32(s, M->WP[wp].OrbitAltitude, 0, ASCII_HT);
				TxVal32(s, M->WP[wp].OrbitVelocitydMpS, 1, ASCII_HT);
			}

			TxNextLine(s);
		}
	}

} // DisplayMission

void DisplayNavMissions(uint8 s) {

	TxNextLine(s);

	DisplayNavMission(s, &NV.Mission);
	DisplayNavMission(s, &NV.NewMission);

} // DisplayNavMissions

boolean NavMissionSanityCheck(MissionStruct * M) {

	// rely on UAVXNav for now
	//CHECK FOR ANY ZERO LAT/LON VALUES ZZZ

	return (true);
} // NavMissionSanityCheck

uint8 NextWPState(void) {

	ResetNavHold = true;
	CurrWPNo++;
	RefreshNavWayPoint();

	return ( CurrWPNo == 0 ? ReturningHome : Transiting);
} // NexWPState

void RefreshNavWayPoint(void) {

	GetNavWayPoint();
	while (WP.Action == navPOI){
		POI.Pos[NorthC] = WP.Pos[NorthC];
		POI.Pos[EastC] = WP.Pos[EastC];
		CurrWPNo++;
		GetNavWayPoint();
	}

	DesiredAltitude = WP.Pos[DownC];

} // RefreshNavWayPoint


void GetNavWayPoint(void) {
	WPStructNV * W;

	if (CurrWPNo > NV.Mission.NoOfWayPoints) CurrWPNo = 0;

	if (CurrWPNo == 0) { // override mission wp 0 and force to Origin
		WP.Pos[NorthC] = HP.Pos[NorthC] = 0.0f;
		WP.Pos[EastC] = HP.Pos[EastC] = 0.0f;
		WP.Pos[DownC] = HP.Pos[DownC] = NV.P[CurrPS][NavRTHAlt];
		WP.Velocity = HP.Velocity = Nav.MaxVelocity;
		WP.Loiter = (int16) NV.P[CurrPS][DescentDelayS]; // mS
		WP.Action = navUnknown;

		WP.OrbitRadius = HP.OrbitRadius = DESCENT_RADIUS_M;
		WP.OrbitAltitude = NV.P[CurrPS][NavRTHAlt];
		WP.OrbitVelocity = HP.OrbitVelocity = DESCENT_VELOCITY_MPS;

		HP.Loiter = 0;
		HP.Action = navUnknown;

		F.UsingPOI = false;
	} else {
		W = &NV.Mission.WP[CurrWPNo];
		WP.Pos[NorthC] = GPSToM(W->LatitudeRaw - GPS.OriginRaw[NorthC]);
		WP.Pos[EastC] = GPSToM(W->LongitudeRaw - GPS.OriginRaw[EastC])
				* GPS.longitudeCorrection;
		WP.Pos[DownC] = (real32) W->Altitude;
		WP.Velocity = (real32) W->VelocitydMpS * 0.1f;
		WP.Loiter = (int16) W->Loiter; // S
		WP.Action = W->Action;
		if (WP.Action == navPOI)
			F.UsingPOI = true;

		WP.OrbitRadius = (real32) W->OrbitRadius; // M
		WP.OrbitAltitude = (real32) W->OrbitAltitude;
		WP.OrbitVelocity = (real32) W->OrbitVelocitydMpS * 0.1f; // dM/S
	}

#ifdef NAV_ENFORCE_ALTITUDE_CEILING
	WP.Pos[DownC] = Limit(WP.Pos[DownC], 0, NAV_CEILING_M);
	WP.OrbitAltitude = Limit(WP.OrbitAltitude, 0, NAV_CEILING_M);
#endif // NAV_ENFORCE_ALTITUDE_CEILING

} // GetNavWaypoint

void DoMissionUpdate(void) {

	if (NavMissionSanityCheck(&NV.NewMission))
		memcpy(&NV.Mission, &NV.NewMission, sizeof(MissionStruct));

	memset(&NV.NewMission, 0, sizeof(MissionStruct));

	if (State != InFlight)
		UpdateNV();

} // DoMissionUpdate

void ClearNavMissions(uint8 s) {
	uint8 ch;

	DisplayNavMissions(s);
	if ((NV.Mission.NoOfWayPoints != 0) || NV.NewMission.NoOfWayPoints != 0) {
		TxString(s, "\r\nClick CONTINUE to remove mission or CANCEL\r\n");
		do {
			ch = PollRxChar(TelemetrySerial);
		} while ((ch != 'x') && (ch != 'z'));

		if (ch == 'x') {
			memset(&NV.Mission, 0, sizeof(MissionStruct));
			memset(&NV.NewMission, 0, sizeof(MissionStruct));
			UpdateNV();
		}
	}
} // ClearNavMission


