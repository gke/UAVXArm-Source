#ifdef INC_LEV
//******************************************************************************
//
// UAV Autopilot - Servo routines
//
// Copyright (C)  G.K. Egan 2001-2005
//
// Hardware commissioning I. Reynolds, P.  Jenkins & R. Cooper
//
//****************************************************************************

#define ServoChannels (8)
#define MaxServo 7
#define MaxServoThrow 100
#define MinServo 0
#define CentreServo 100
#define FullServo 200
#define ServoScale 1

typedef struct 
  {
  int8
    Zero, // 100 for primary controls, 0 for throttle, gear etc. 
    Gain,   // Gain -2..2, negative for reverse
    Sense,
    MinThrow,
    MaxThrow;
  } ServoRec;

ServoRec ServoCharacteristics[ServoChannels];  

int16 ServoOut[ServoChannels]; // final scaled servo value
//xxx#define ServoPort ThrottleSPort
uint8 Dope[ServoChannels];
uint8 Ticks[ServoChannels+1]; // sentinel Ticks[ServoChannels+1] 
uint8 ServoVec[ServoChannels+1];

void InitServo(uint8 Servo, int8 Zero, int8 Gain, int8 Sense, int8 MinThrow, int8 MaxThrow)
{
  ServoRec *WithServo;

  if (Servo<=MaxServo)
    {
    WithServo=&ServoCharacteristics[Servo];
    WithServo->Zero=Zero;
    WithServo->Gain=Gain;
    WithServo->Sense=Sense;
    WithServo->MinThrow=MinThrow;
    WithServo->MaxThrow=MaxThrow; 
    ServoOut[Servo]=MinServo;
    }
}

void ResetControls()
{
  SubControls Control; 
  
  for (Control=0;Control<MaxControls;Control++)
    Lev.Controls[Control]=0;  
}

void SlewControls(uint8 Control, int16 Val, uint8 Rate)
{
  Lev.Controls[Control]=Limit(Val, Lev.Controls[Control]-Rate, Lev.Controls[Control]+Rate);
}

void DriveServos()
{
}

#endif


