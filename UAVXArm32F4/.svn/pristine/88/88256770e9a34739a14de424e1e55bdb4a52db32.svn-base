// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

#include "UAVX.h"

#define FAKE_GPS_DT_MS	 200

#define EM_MASS  1.2f // Kg
#define EM_ARM_LEN 0.3f // M
#define EM_MASS_R (1.0f/EM_MASS)
#define EM_MAX_THRUST ((EM_MASS/THROTTLE_DEFAULT_CRUISE)*GRAVITY_MPS_S)
#define EM_MAX_YAW_THRUST (EM_MAX_THRUST*0.015f) // TODO: tweak!
#define EM_MAX_MPS  10.0f
#define EM_CRUISE_MPS ((AIRSPEED_MIN_MPS+AIRSPEED_MIN_MPS)*0.5f)
//#define EM_DRAG_SCALE 1.0f
#define EM_DRAG_SCALE (EM_MAX_THRUST/(EM_MAX_MPS*EM_MAX_MPS)) // 0.004f?
#define EM_ANGLE_TO_MPS  (EM_MAX_MPS/QUARTER_PI)

const real32 Wind[2] = { 0, 0 }; //{ 0.25f, 1.0f };

#define HR_GPS

typedef struct {
	real32 Pos;
	real32 Vel;
	real32 Acc;
} EmStruct;

EmStruct Aircraft[3];

real32 NorthHP, EastHP;
real32 ROC = 0.0f;
real32 FakeAltitude = 0.0f;

void CheckInitEmulation(void) {
	int32 a;

	if (F.Emulation) {
		for (a = Pitch; a <= Yaw; a++)
			GPS.Pos[a] = GPS.Vel[a] = Aircraft[a].Pos = Aircraft[a].Vel
					= Aircraft[a].Acc = 0.0f;

		DesiredAltitude = Altitude = RangefinderAltitude = FakeAltitude = ROC
				= 0.0f;
		BaroAltitude = OriginAltitude;
	}
} // CheckInitEmulation

real32 Drag(real32 v) {
	return (Sign(v) * Sqr(v) * EM_DRAG_SCALE);
} // Drag

real32 Thermal(real32 East, real32 North) {
#if defined(USE_THERMAL)
	const int16 NT = 2;
	const real32 NorthP[] = {200.0f, 300.0f};
	const real32 EastP[] = {200.0f, 50.0f};
	const real32 Radius[] = {50.0f, 60.0f}; // could make them oval -> ridge?
	const real32 Strength[] = {2.0f, 4.0f};
	real32 Uplift;
	int16 t;

	Uplift = 0.0f;

	if (State == InFlight)
	for (t = 0; t <NT; t++)
	Uplift += Strength[t]*exp(-(
					Sqr(Nav.Pos[NorthC] - NorthP[t])/(2.0f*Sqr(Radius[t]))
					+
					Sqr(Nav.Pos[EastC] - EastP[t])/(2.0f*Sqr(Radius[t]))
			)
	);

	return Uplift;

#else
	return 0.0f;
#endif
} // Thermal


void DoEmulation(void) {

	const real32 RollPitchInertiaR = (12.0f / (EM_MASS * EM_ARM_LEN
			* EM_ARM_LEN));
	const real32 InertiaR[3] = { RollPitchInertiaR, RollPitchInertiaR,
			RollPitchInertiaR * 3.0f };
	real32 Temp, Accel, Thrust;
	int32 a;
	real32 EffSink;

	if (IsFixedWing) {

		real32
				dThrottle =
						Limit(DesiredThrottle + AltComp - CruiseThrottle, -1.0f, 1.0f);

		Thrust = (DesiredThrottle + AltComp) * EM_MAX_THRUST; // zzz needs tidying up
		Airspeed
				= Limit((1.0 + dThrottle) * EM_CRUISE_MPS, AIRSPEED_MIN_MPS, AIRSPEED_MAX_MPS);

		EffSink = (EXP_THERMAL_SINK_MPS + Fl * VRS_MIN_ROC_MPS) / cosf(
				A[Roll].Angle);
		ROC = (dThrottle * 10.0f + EffSink);

		ROC = Limit(ROC, EffSink, 1000.0f);

		ROC += Thermal(Nav.Pos[EastC], Nav.Pos[NorthC]);

	} else {
		Thrust = (DesiredThrottle + AltComp) * EM_MAX_THRUST;
		Accel = (Thrust - EM_MASS * GRAVITY_MPS_S - Drag(ROC)) * EM_MASS_R;
		ROC += Accel * dT;
	}

	if ((State != InFlight) || ((Altitude <= 0.05f) && (ROC <= 0.0f)))
		FakeAltitude = ROC = 0.0f;
	else
		FakeAltitude += ROC * dT;

	GPS.altitude = BaroAltitude = FakeAltitude + OriginAltitude;
	Altitude = FakeAltitude;
	F.BaroActive = F.NewAltitudeValue = true;

	if (FakeAltitude <= 0.05f) {
		for (a = Pitch; a <= Yaw; a++)
			Aircraft[a].Vel = Aircraft[a].Acc = GPS.Vel[a] = Rate[a] = Acc[a]
					= A[a].Angle = A[a].Out = 0.0f;
	} else {

		if (IsFixedWing) { // no inertial effects for fixed wing
			for (a = Pitch; a <= Roll; a++)
				Rate[a] -= (A[a].Out * DegreesToRadians(60)) * dT;

			if (Airspeed > 0.0f)
				Rate[Yaw] = A[Yaw].Out * DegreesToRadians(30)
#if defined(SUPPRESS_FULL_ROLL_MATH)
						+ A[Roll].Angle / (2.0f * NAV_MAX_ANGLE_RAD);
#else
						+ tanf(Limit1(A[Roll].Angle, NAV_MAX_ANGLE_RAD))
								* GRAVITY_MPS_S / Airspeed;
#endif
			else
				Rate[Yaw] = 0.0f;
			Aircraft[Pitch].Vel = -Airspeed; //-EM_CRUISE_MPS;
			//			Aircraft[Roll].Vel = A[Roll].Angle * EM_ANGLE_TO_MPS * dT;
		} else {

			for (a = Pitch; a <= Roll; a++) {
				Rate[a] -= (EM_MAX_THRUST * 0.25f * A[a].Out * EM_ARM_LEN
						* InertiaR[a] - 2.0f * Sign(A[a].Out) * Sqr(Rate[a]))
						* dT;
				Temp = sinf(A[a].Angle) * Thrust;
				Temp = Temp - Drag(Aircraft[a].Vel);
				Aircraft[a].Vel += (Temp * EM_MASS_R) * dT;
			}

			Rate[Yaw] += (EM_MAX_YAW_THRUST * A[Yaw].Out * EM_ARM_LEN
					* InertiaR[a] - 2.0f * Sign(A[Yaw].Out) * Sqr(Rate[Yaw]))
					* dT;
			Rate[Yaw] = Limit1(Rate[Yaw], DegreesToRadians(180.0f));
		}

		Rotate(&GPS.Vel[NorthC], &GPS.Vel[EastC], -Aircraft[Pitch].Vel,
				Aircraft[Roll].Vel, -Heading);

		Acc[BF] = sinf(A[Pitch].Angle) * GRAVITY_MPS_S; // TODO: needs further work to cover lateral acc.
		Acc[LR] = -sinf(A[Roll].Angle) * GRAVITY_MPS_S;

		for (a = NorthC; a <= EastC; a++) {
			GPS.Vel[a] += Wind[a];
			GPS.Pos[a] += GPS.Vel[a] * dT;
		}
	}

	Acc[UD] = -sqrtf(Sqr(GRAVITY_MPS_S) - (Sqr(Acc[BF]) + Sqr(Acc[LR]))); // needs scaling

	GPS.Raw[EastC] = GPS.OriginRaw[EastC] + MToGPS(GPS.Pos[EastC])
			/ GPS.longitudeCorrection;
	GPS.Raw[NorthC] = GPS.OriginRaw[NorthC] + MToGPS(GPS.Pos[NorthC]);

	GPS.gspeed = sqrtf(Sqr(GPS.Vel[EastC]) + Sqr(GPS.Vel[NorthC]));

} // DoEmulation


void GPSEmulation(void) {
	uint32 NowmS;

	while (serialAvailable(GPSRxSerial))
		RxChar(GPSRxSerial); // flush

	NowmS = mSClock();
	if (NowmS > mS[FakeGPSUpdate]) {
		GPS.lastPosUpdatemS = GPS.lastVelUpdatemS = mSClock();
		mSTimer(NowmS, FakeGPSUpdate, FAKE_GPS_DT_MS);

		GPS.heading = Heading;

		GPSPacketTag = GPGGAPacketTag;
		GPS.fix = 3;
		GPS.noofsats = 10;
		GPS.hDOP = 0.9f;
		GPS.hAcc = GPS.hDOP * GPS_HDOP_TO_HACC;
		F.GPSValid = F.GPSPacketReceived = true;
	}

} // GPSEmulation


