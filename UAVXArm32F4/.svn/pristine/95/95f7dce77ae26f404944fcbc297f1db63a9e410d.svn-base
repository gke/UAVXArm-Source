// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// 	  WS281X  routines based on LEDStrip RGB-LED Driver
//    Tobias Mache & Florian Zahn CCC Mannheim e.V.
//    https://github.com/C3MA

#include "UAVX.h"

//_________________________________________________________________

// WS2812 (hard coded to Aux1)

// LEDYellowSel, LEDRedSel, LEDBlueSel, LEDGreenSel, LEDNone

#if defined(USE_WS2812) || defined(USE_WS2812B)

const wsLEDStruct wsLEDColours[] = { {255, 255, 0}, {255, 0, 0}, {0, 0,
		255}, {0, 255, 0}, {0, 0, 0}}; // RGB


uint16 wsPWMBuffer[PWM_BUFFER_SIZE];
wsLEDStruct wsLEDs[MAX_WS2812_LEDS];
uint32 wsCurrLED = 0;
boolean incomplete = false;

static void wsInitBuffers(void) {
	int16 i;

	for (i = 0; i < PWM_BUFFER_SIZE; i++)
	wsPWMBuffer[i] = 0;

	for (i = 0; i < MAX_WS2812_LEDS; i++) {
		wsLEDs[i].r = 0;
		wsLEDs[i].g = 0;
		wsLEDs[i].b = 0;
	}
} // wsInitBuffers


static void wsStartDMA(void) {
	static DMA_InitTypeDef dma_init = {.DMA_BufferSize = PWM_BUFFER_SIZE,
		.DMA_Channel = DMA_Channel_0,
		.DMA_DIR = DMA_DIR_MemoryToPeripheral, .DMA_FIFOMode =
		DMA_FIFOMode_Disable, .DMA_FIFOThreshold =
		DMA_FIFOThreshold_HalfFull, .DMA_Memory0BaseAddr =
		(uint32) wsPWMBuffer, .DMA_MemoryBurst =
		DMA_MemoryBurst_Single, .DMA_MemoryDataSize =
		DMA_MemoryDataSize_HalfWord, .DMA_MemoryInc =
		DMA_MemoryInc_Enable, .DMA_Mode = DMA_Mode_Circular,
		.DMA_PeripheralBaseAddr = (uint32) &TIM8->CCR1,
		.DMA_PeripheralBurst = DMA_PeripheralBurst_Single,
		.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord,
		.DMA_PeripheralInc = DMA_PeripheralInc_Disable, .DMA_Priority =
		DMA_Priority_High}; // Medium

	DMA_Init(DMA2_Stream2, &dma_init);
	DMA_Cmd(DMA2_Stream2, ENABLE);
	TIM_DMACmd(TIM8, TIM_DMA_CC1, ENABLE);

} // wsStartDMA


void wsInit(void) { // hard coded to PORTC Pin 6 Aux1
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef TIM_TimeBase_InitStructure;
	TIM_OCInitTypeDef TIM_OC_InitStructure;
	NVIC_InitTypeDef nvic_init;

	wsInitBuffers();

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);

	TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBase_InitStructure.TIM_Period = 41; //210;
	TIM_TimeBase_InitStructure.TIM_Prescaler = 4; // 0 TODO:
	TIM_TimeBaseInit(TIM8, &TIM_TimeBase_InitStructure);

	TIM_OCStructInit(&TIM_OC_InitStructure);
	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OC_InitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;

	TIM_OC1Init(TIM8, &TIM_OC_InitStructure);

	TIM_CtrlPWMOutputs(TIM8, ENABLE);

	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM8, ENABLE);

	TIM_CCxCmd(TIM8, TIM_Channel_1, TIM_CCx_Enable);
	TIM_Cmd(TIM8, ENABLE);

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
	TIM_DMACmd(TIM8, TIM_DMA_CC1, ENABLE);
	DMA_ITConfig(DMA2_Stream2, DMA_IT_HT, ENABLE);
	DMA_ITConfig(DMA2_Stream2, DMA_IT_TC, ENABLE);

	wsStartDMA();

	nvic_init.NVIC_IRQChannel = DMA2_Stream2_IRQn;
	nvic_init.NVIC_IRQChannelPreemptionPriority = 4;
	nvic_init.NVIC_IRQChannelSubPriority = 0;
	nvic_init.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic_init);

} // wsInit

#define ss 33 // 168.0f

static void wsGenPWM(uint16 ** const dest, const uint8 color) {
	// generates the PWM patterns for each colour byte

#if defined(USE_WS2812)
	const uint16 H = (uint16) (0.7f * ss);
	const uint16 L = (uint16) (0.35f * ss);
#else // USE_WS2812B
	const uint16 H = (uint16)(0.8f*ss);
	const uint16 L = (uint16)(0.4f*ss);
#endif
	uint8 mask = 0x80;

	do {
		**dest = color & mask ? H : L; // pulse width 0.625, 0.25
		*dest += 1;
		mask >>= 1;
	}while (mask != 0);

} // wsGenPWM


void wsUpdateBuffer(uint16* B) { // computationally expensive ~6%
	wsLEDStruct *wsLEDptr;
	uint32 i, j;
	uint16 * wsPWMptr;

	for (i = 0; i < (PWM_BUFFER_SIZE >> 1); i += 24) {
		if (incomplete) {
			incomplete = false;
			for (j = 0; j < 24; j++)
			B[i + j] = 0;

		} else {
			if (wsCurrLED == MAX_WS2812_LEDS) {
				incomplete = true;
				wsCurrLED = 0;

				for (j = 0; j < 24; j++)
				B[i + j] = 0;
			} else {
				wsLEDptr = &wsLEDs[wsCurrLED++];
				wsPWMptr = B + i;

				// WS2812 order is G R B
				wsGenPWM(&wsPWMptr, wsLEDptr->g);
				wsGenPWM(&wsPWMptr, wsLEDptr->r);
				wsGenPWM(&wsPWMptr, wsLEDptr->b);
			}
		}
	}
} // wsUpdateBuffer


void wsSetColour(int i, uint8 R, uint8 G, uint8 B) {
	wsLEDs[i].g = G;
	wsLEDs[i].r = R;
	wsLEDs[i].b = B;
} // wsSetColour

void wsLEDOn(uint8 l) { // run in pairs
	wsSetColour(l*2, wsLEDColours[l].r, wsLEDColours[l].g, wsLEDColours[l].b);
	wsSetColour(l*2+1, wsLEDColours[l].r, wsLEDColours[l].g, wsLEDColours[l].b);
} // wsLEDOn

void wsLEDOff(uint8 l) {
	wsSetColour(l*2, 0, 0, 0);
	wsSetColour(l*2+1, 0, 0, 0);
} // wsLEDOff;

boolean wsLEDIsOn(uint8 l) {

	return ((wsLEDs[l].r != 0) || (wsLEDs[l].g != 0) || (wsLEDs[l].b != 0));

} // wsLEDIsOn

void wsLEDToggle(uint8 l) {

	if (wsLEDIsOn(l))
	wsLEDOff(l);
	else
	wsLEDOn(l);

} // wsLEDToggle

#else

void wsInit(void) {
} // wsInit

void wsLEDOn(uint8 l) {
} // wsLEDOn

void wsLEDOff(uint8 l) {
} // wsLEDOff;

boolean wsLEDIsOn(uint8 l) {

	return (false);
} // wsLEDIsOn

void wsLEDToggle(uint8 l) {
} // wsLEDToggle

#endif

//______________________________________________________________

uint8 LEDChase[] = { LEDBlueSel, LEDGreenSel, LEDRedSel, LEDYellowSel };
boolean LEDsSaved[4] = { false };
uint8 LEDPattern = 0;
boolean UsingExtLEDs = false;

void BeeperOff(void) {
#if defined(V1_BOARD)
	digitalWrite(&GPIOPins[BeeperSel], 1);
#else
	digitalWrite(&GPIOPins[BeeperSel], 0);
#endif
} // BeeperOff

void BeeperOn(void) {
#if defined(V1_BOARD)
	digitalWrite(&GPIOPins[BeeperSel], 0);
#else
	digitalWrite(&GPIOPins[BeeperSel], 1);
#endif
} // BeeperOn

void BeeperToggle(void) {
	digitalToggle(&GPIOPins[BeeperSel]);
} // BeeperToggle

boolean BeeperIsOn(void) {
#if defined(V1_BOARD)
	return (digitalRead(&GPIOPins[BeeperSel]) == 0);
#else
	return (digitalRead(&GPIOPins[BeeperSel]) != 0);
#endif
} // BeeperIsOn

void LEDOn(uint8 l) {

#if defined(V1_BOARD)
	if (State == InFlight)
	LEDsOff();
	else
#endif
	if (l < MAX_LEDS) {
		digitalWrite(&LEDPins[l], 0);
		wsLEDOn(l);
	}

} // LEDOn

void LEDOff(uint8 l) {

	if (l < MAX_LEDS) {
		digitalWrite(&LEDPins[l], 1);
		wsLEDOff(l);
	}
} // LEDOff

void LEDToggle(uint8 l) {
	if (l < MAX_LEDS) {
		digitalToggle(&LEDPins[l]);
		wsLEDToggle(l);
	}
} // LEDToggle

boolean LEDIsOn(uint8 l) {
	if (l < MAX_LEDS)
		return (!digitalRead(&LEDPins[l]));
	else
		return (false);
} // LEDIsOn

void LEDsOn(void) {
	uint8 l;

	for (l = 0; l < MAX_LEDS; l++)
		LEDOn(l);
} // LEDsOn

void LEDsOff(void) {
	uint8 l;

	for (l = 0; l < MAX_LEDS; l++)
		LEDOff(l);
} // LEDsOff

void SaveLEDs(void) { // one level only
	uint8 l;

	for (l = 0; l < MAX_LEDS; l++)
		LEDsSaved[l] = LEDIsOn(l);
} // SaveLEDs

void RestoreLEDs(void) {
	uint8 l;

	for (l = 0; l < MAX_LEDS; l++)
		LEDOn(LEDsSaved[l]);
} // RestoreLEDs

void LEDChaser(void) {
	uint32 NowmS;

	NowmS = mSClock();
	if (NowmS > mS[LEDChaserUpdate]) {
		if (F.AltControlEnabled && F.HoldingAlt) {
			LEDOff(LEDChase[LEDPattern]);
			if (LEDPattern < MAX_LEDS)
				LEDPattern++;
			else
				LEDPattern = 0;
			LEDOn(LEDChase[LEDPattern]);
		} else
			LEDsOff();

		mSTimer(NowmS, LEDChaserUpdate, 100);
	}

} // LEDChaser



void PowerOutput(uint8 d) {
	uint8 s;

	LEDOff(d);
	for (s = 0; s < 10; s++) { // 10 flashes (count MUST be even!)
		LEDToggle(d);
		Delay1mS(50);
	}
} // PowerOutput


void InitLEDs(void) {

	LEDsOff();
	BeeperOff();

} // InitLEDs


