// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.
//    If not, see http://www.gnu.org/licenses/


#ifndef _nonvolatile_h
#define _nonvolatile_h

#if defined(STM32F1)
#define NV_FLASH_SIZE 2048
#else
#define NV_FLASH_SIZE 16384
#endif

#define PARAMS_ADDR_NV		0		// code assumes zero!
#define MAX_PARAMETERS		64		// parameters in EEPROM start at zero
#define MAX_STATS			32 // x 16bit
#define MAX_SETTINGS		64

#define EEPROM_ID 0xa0

typedef struct {
	real32 TRef;
	real32 DynamicAccBias[3], M[3], C[3];
}__attribute__((packed)) InertialCalStruct;

typedef struct {
	int8 P[2][MAX_PARAMETERS];
	int16 Stats[MAX_STATS];
	MagCalStruct MagCal;
	InertialCalStruct AccCal, GyroCal;
	uint16 CurrRevisionNo;

	MissionStruct Mission, NewMission;
}__attribute__((packed)) NVStruct;

extern NVStruct NV;

#if defined(V4_BOARD)
#define MEM_SIZE 16777216
#define MEM_PAGE_SIZE 256
#define MEM_BUFFER_SIZE 256
#else
#define MEM_SIZE 65536
#define MEM_BUFFER_SIZE 64
#endif

extern boolean UpdateNV(void);
extern int8 ReadNV(uint32 a);
extern void ReadBlockNV(uint32 a, uint16 l, int8 *v);

extern boolean EraseExtMem(void);

extern void ReadBlockExtMem(uint32 a, uint16 l, int8 * v);
boolean WriteBlockExtMem(uint32 a, uint16 l, int8 *v);

extern void LogSerial(uint8 ch);
extern void InitExtMem();
extern void ShowStatusExtMem(uint8 s);

extern int8 ReadExtMem(uint32 a);
extern int16 Read16ExtMem(uint32 a);
extern int32 Read32ExtMem(uint32 a);
extern boolean WriteExtMem(uint32 a, int8 d);
extern boolean Write16ExtMem(uint32 a, int16 d);
extern boolean Write32ExtMem(uint32 a, int32 d);

extern uint32 CurrExtMemAddr;


#endif

