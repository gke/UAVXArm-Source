// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/


#include "UAVX.h"

boolean WriteI2CEEPROMBlock(uint32 a, uint16 l, int8 *v) {
	boolean r = true;
	uint16 i;
	uint8 b[66]; // I2C implementation restriction
	uint8 bank;
	i8u8u u;

	if (F.HaveNVMem) {

		while (!uSTimeout(MemReady)) {
			// BLOCKING
		};

		bank = 0;// only one chip (a & 0x00070000) >> 15;
		b[0] = (a >> 8) & 0xff;
		b[1] = a & 0xff; // messy - i2c routines use 8 bit register#
		for (i = 0; i < l; i++) {
			u.i8 = v[i];
			b[i + 2] = u.u8;
		}

		r &= I2CWriteBlock(memSel, busDev[memSel].i2cId | bank, 0xff, 2 + l, b);

	} else
		r = false;
	uSTimer(MemReady, 5000);

	return (r);

} // WriteI2CEEPROMBlock


void ReadI2CEEPROMBlock(uint32 a, uint16 l, int8 * v) {
	uint16 i;
	uint8 bank;
	uint8 b[2];

	if (F.HaveNVMem) {
		while (uSClock() < uS[MemReady]) {
			// BLOCKING
		};

		bank = 0; // only one chip (a & 0x00070000) >> 15;
		b[0] = (a >> 8) & 0xff;
		b[1] = a & 0xff; // messy - sio routines use 8 bit register#

		I2CWriteBlock(memSel, busDev[memSel].i2cId | bank, 0xff, 2, b);
		I2CReadBlock(memSel, busDev[memSel].i2cId | bank, 0xff, l, (uint8*) v);

	} else
		for (i = 0; i < l; i++)
			v[i] = 0xff;

} // ReadI2CEEPROMBlock


boolean EraseI2CEEPROM(void) {
	timemS TimeoutmS;
	uint32 a;
	int8 B[MEM_BUFFER_SIZE];
	boolean r = true;

	memset(&B, -1, sizeof(B));
	TimeoutmS = mSClock();
	for (a = 0; a < MEM_SIZE; a += MEM_BUFFER_SIZE) {
		r &= WriteBlockNVMem(a, MEM_BUFFER_SIZE, B);

		if (mSClock() > TimeoutmS) {
			TimeoutmS += 100;
			LEDToggle(ledBlueSel);
			LEDToggle(ledYellowSel);
		}
	}

	return r;

} // EraseI2CEEPROM


boolean WriteBlockNVMem(uint32 a, uint16 l, int8 *v) {
	boolean r;

	if (F.HaveNVMem)
		switch (busDev[memSel].type) {
		case i2cEEPROMMem:
			r = WriteI2CEEPROMBlock(a, l, v);
			break;
		case spiFlashMem:
			r = ReadModifyWriteSPIFlash(memSel, a, l, v);
			break;
		default:
			r = false;
			break;
		}
	else
		r = false;

	return r;

} // WriteBlockNVMem


void ReadBlockNVMem(uint32 a, uint16 l, int8 * v) {
	uint32 i;

	if (F.HaveNVMem) {
		switch (busDev[memSel].type) {
		case i2cEEPROMMem:
			ReadI2CEEPROMBlock(a, l, v);
			break;
		case spiFlashMem:
			ReadSPIFlashPage(memSel, a, l, v);
			break;
		default:
			break;
		}
	} else
		for (i = 0; i < l; i++)
			v[i] = 0xff;

} // ReadBlockNVMem


int8 ReadNVMem(uint32 a) {
	int8 v = 0xff;

	switch (busDev[memSel].type) {
	case i2cEEPROMMem:
		ReadI2CEEPROMBlock(a, 1, &v);
		break;
	case spiFlashMem:
		ReadSPIFlashPage(memSel, a, 1, &v);
		break;
	default:
		break;
	}

	return v;
} // ReadNVMem


boolean EraseNVMem(void) {
	boolean v;

	SaveLEDs();
	LEDsOff();
	LEDOn(ledBlueSel);

	switch (busDev[memSel].type) {
	case i2cEEPROMMem:
		v = EraseI2CEEPROM();
		break;
	case spiFlashMem:
		v = EraseSPIFlash();
		break;
	default:
		break;
	}

	RestoreLEDs();

	return v;
} // EraseNVMem


int16 Read16NVMem(uint32 a) {
	i16i8u u;

	u.i8[0] = ReadNVMem(a);
	u.i8[1] = ReadNVMem(a + 1);

	return (u.i16);
} // Read16EE

int32 Read32NVMem(uint32 a) {
	i32i8u u;

	u.i8[0] = ReadNVMem(a);
	u.i8[1] = ReadNVMem(a + 1);
	u.i8[2] = ReadNVMem(a + 2);
	u.i8[3] = ReadNVMem(a + 3);

	return (u.i32);

} // Read32EE

boolean WriteNVMem(uint32 a, int8 d) {
	boolean r = true;

#ifndef COMMISSIONING_TEST
	if (ReadNVMem(a) != d) // avoid redundant writes
#endif
		r = WriteBlockNVMem(a, 1, &d);
	return (r);
} // WriteEE


boolean Write16NVMem(uint32 a, int16 d) {
	boolean r = true;
	i16i8u u;

	if (Read16NVMem(a) != d) {
		u.i16 = d;
		r = WriteBlockNVMem(a, 2, u.i8);
	}

	return (r);
} // Write16EE

boolean Write32NVMem(uint32 a, int32 d) {
	boolean r = true;
	i32i8u u;

	if (Read32NVMem(a) != d) {
		u.i32 = d;
		r = WriteBlockNVMem(a, 4, u.i8);
	}
	return (r);
} // Write16EE


void InitNVMem(void) {
	int8 v, SaveVal;

	if (busDev[memSel].Used) {

		uS[MemReady] = uSClock();

		switch (busDev[memSel].type) {
		case i2cEEPROMMem:
			F.HaveNVMem = true;

			SaveVal = ReadNVMem(MEM_SIZE - 1);

			v = 0b01010101;
			WriteNVMem(MEM_SIZE - 1, v);
			v = 0;
			v = ReadNVMem(MEM_SIZE - 1);

			WriteNVMem(MEM_SIZE - 1, SaveVal);

			F.HaveNVMem = v == 0b01010101;
			break;
		case spiFlashMem:
			F.HaveNVMem = InitSPIFlash();
			break;
		case ArmFlashMem:


			break;
		default:
			F.HaveNVMem = false;
		}
	} else
		F.HaveNVMem = false;

} // InitNVMem

void ShowStatusNVMem(uint8 s) {
	if (busDev[memSel].Used && (busDev[memSel].type == spiFlashMem))
		ShowStatusSPIFlash(s);

} // ShowStatusMem


