// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// 	  WS281X  routines based on LEDStrip RGB-LED Driver
//    Tobias Mache & Florian Zahn CCC Mannheim e.V.
//    https://github.com/C3MA

#include "UAVX.h"

//_________________________________________________________________

// WS2812 (hard coded to Aux1)

enum Colours { // RGB order
	AliceBlue = 0xF0F8FF,
	Amethyst = 0x9966CC,
	AntiqueWhite = 0xFAEBD7,
	Aqua = 0x00FFFF,
	Aquamarine = 0x7FFFD4,
	Azure = 0xF0FFFF,
	Beige = 0xF5F5DC,
	Bisque = 0xFFE4C4,
	Black = 0x000000,
	BlanchedAlmond = 0xFFEBCD,
	Blue = 0x0000FF,
	BlueViolet = 0x8A2BE2,
	Brown = 0xA52A2A,
	BurlyWood = 0xDEB887,
	CadetBlue = 0x5F9EA0,
	Chartreuse = 0x7FFF00,
	Chocolate = 0xD2691E,
	Coral = 0xFF7F50,
	CornflowerBlue = 0x6495ED,
	Cornsilk = 0xFFF8DC,
	Crimson = 0xDC143C,
	Cyan = 0x00FFFF,
	DarkBlue = 0x00008B,
	DarkCyan = 0x008B8B,
	DarkGoldenrod = 0xB8860B,
	DarkGray = 0xA9A9A9,
	DarkGreen = 0x006400,
	DarkKhaki = 0xBDB76B,
	DarkMagenta = 0x8B008B,
	DarkOliveGreen = 0x556B2F,
	DarkOrange = 0xFF8C00,
	DarkOrchid = 0x9932CC,
	DarkRed = 0x8B0000,
	DarkSalmon = 0xE9967A,
	DarkSeaGreen = 0x8FBC8F,
	DarkSlateBlue = 0x483D8B,
	DarkSlateGray = 0x2F4F4F,
	DarkTurquoise = 0x00CED1,
	DarkViolet = 0x9400D3,
	DeepPink = 0xFF1493,
	DeepSkyBlue = 0x00BFFF,
	DimGray = 0x696969,
	DodgerBlue = 0x1E90FF,
	FireBrick = 0xB22222,
	FloralWhite = 0xFFFAF0,
	ForestGreen = 0x228B22,
	Fuchsia = 0xFF00FF,
	Gainsboro = 0xDCDCDC,
	GhostWhite = 0xF8F8FF,
	Gold = 0xFFD700,
	Goldenrod = 0xDAA520,
	Gray = 0x808080,
	Green = 0x008000,
	GreenYellow = 0xADFF2F,
	Honeydew = 0xF0FFF0,
	HotPink = 0xFF69B4,
	IndianRed = 0xCD5C5C,
	Indigo = 0x4B0082,
	Ivory = 0xFFFFF0,
	Khaki = 0xF0E68C,
	Lavender = 0xE6E6FA,
	LavenderBlush = 0xFFF0F5,
	LawnGreen = 0x7CFC00,
	LemonChiffon = 0xFFFACD,
	LightBlue = 0xADD8E6,
	LightCoral = 0xF08080,
	LightCyan = 0xE0FFFF,
	LightGoldenrodYellow = 0xFAFAD2,
	LightGreen = 0x90EE90,
	LightGrey = 0xD3D3D3,
	LightPink = 0xFFB6C1,
	LightSalmon = 0xFFA07A,
	LightSeaGreen = 0x20B2AA,
	LightSkyBlue = 0x87CEFA,
	LightSlateGray = 0x778899,
	LightSteelBlue = 0xB0C4DE,
	LightYellow = 0xFFFFE0,
	Lime = 0x00FF00,
	LimeGreen = 0x32CD32,
	Linen = 0xFAF0E6,
	Magenta = 0xFF00FF,
	Maroon = 0x800000,
	MediumAquamarine = 0x66CDAA,
	MediumBlue = 0x0000CD,
	MediumOrchid = 0xBA55D3,
	MediumPurple = 0x9370DB,
	MediumSeaGreen = 0x3CB371,
	MediumSlateBlue = 0x7B68EE,
	MediumSpringGreen = 0x00FA9A,
	MediumTurquoise = 0x48D1CC,
	MediumVioletRed = 0xC71585,
	MidnightBlue = 0x191970,
	MintCream = 0xF5FFFA,
	MistyRose = 0xFFE4E1,
	Moccasin = 0xFFE4B5,
	NavajoWhite = 0xFFDEAD,
	Navy = 0x000080,
	OldLace = 0xFDF5E6,
	Olive = 0x808000,
	OliveDrab = 0x6B8E23,
	Orange = 0xFFA500,
	OrangeRed = 0xFF4500,
	Orchid = 0xDA70D6,
	PaleGoldenrod = 0xEEE8AA,
	PaleGreen = 0x98FB98,
	PaleTurquoise = 0xAFEEEE,
	PaleVioletRed = 0xDB7093,
	PapayaWhip = 0xFFEFD5,
	PeachPuff = 0xFFDAB9,
	Peru = 0xCD853F,
	Pink = 0xFFC0CB,
	Plaid = 0xCC5533,
	Plum = 0xDDA0DD,
	PowderBlue = 0xB0E0E6,
	Purple = 0x800080,
	Red = 0xFF0000,
	RosyBrown = 0xBC8F8F,
	RoyalBlue = 0x4169E1,
	SaddleBrown = 0x8B4513,
	Salmon = 0xFA8072,
	SandyBrown = 0xF4A460,
	SeaGreen = 0x2E8B57,
	Seashell = 0xFFF5EE,
	Sienna = 0xA0522D,
	Silver = 0xC0C0C0,
	SkyBlue = 0x87CEEB,
	SlateBlue = 0x6A5ACD,
	SlateGray = 0x708090,
	Snow = 0xFFFAFA,
	SpringGreen = 0x00FF7F,
	SteelBlue = 0x4682B4,
	Tan = 0xD2B48C,
	Teal = 0x008080,
	Thistle = 0xD8BFD8,
	Tomato = 0xFF6347,
	Turquoise = 0x40E0D0,
	Violet = 0xEE82EE,
	Wheat = 0xF5DEB3,
	White = 0xFFFFFF,
	WhiteSmoke = 0xF5F5F5,
	Yellow = 0xFFFF00,
	YellowGreen = 0x9ACD32
};

// ledYellowSel, ledRedSel, ledDBlueSel, ledGreenSel


uint8 CurrNoOfWSLEDs = 0;

#if defined(USE_WS2812) || defined(USE_WS2812B)

// Y/O, R, B, G
const WSLEDStruct WSLEDColours[] = { { 0xff, 0x45, 0 }, { 0xff, 0, 0 }, { 0, 0,
		0xff }, { 0, 0x80, 0 } }; // RGB
const WSLEDStruct LEDNone = { 0, 0, 0 };

uint16 WSLEDPWMBuffer[MAX_PWM_BUFFER_SIZE];
WSLEDStruct WSLEDs[MAX_WS2812_LEDS];
boolean LEDState[MAX_LED_PINS];
uint8 NoOfWSLEDs, WSLEDGroupSize;
uint16 WSLEDBufferSize;
uint8 CurrWSLED = 0;
boolean UsingWS28XXLEDs = false;
boolean WSLEDChanged;
volatile boolean WSDMAActive;

// Recommendation post 2013 from WorldSemi are now: 0 = 400ns high/850ns low, and 1 = 850ns high, 400ns low"
// Currently the timings are 0 = 350ns high/800ns and 1 = 700ns high/650ns low.
// Betaflight timings are 0 = 350ns high/800ns and 1 = 700ns high/650ns low.


#define ss 33 // 168.0f
#if defined(USE_WS2812)
const uint16 WS_L = (uint16) (0.35f * ss); // 11.55 473
const uint16 WS_H = (uint16) (0.7f * ss); // 23.1 947

#else // USE_WS2812B
const uint16 WS_L = (uint16)(0.4f*ss); // 13.2 541.2
const uint16 WS_H = (uint16)(0.8f*ss); // 26.4 1082.4
#endif

/* 6Kb lookup

 struct {
 uint16 b[24];
 } WSPWMLookup[256];

 void PopulateWSPWMLookup(void) {
 idx c;
 uint8 colour, bb;

 for (c = 0; c < 256; c++) {
 uint8 mask = 0x80;
 bb = 0;
 colour = c;

 do {
 WSPWMLookup[c].b[bb++] = colour & mask ? WS_H : WS_L; // pulse width 0.625, 0.25
 mask >>= 1;
 } while (mask != 0);

 }

 } // PopulateWSPWMLookup
 */

static inline void GenWSLEDPWM(uint16 ** const dest, const uint8 color) {
	// generates the PWM patterns for each colour byte - lookup table would be too large

	uint8 mask = 0x80;

	do {
		**dest = color & mask ? WS_H : WS_L; // pulse width 0.625, 0.25
		*dest += 1;
		mask >>= 1;
	} while (mask != 0);

} // GenWSLEDPWM


/* set individual WS PWM patterns
 void SetWSBufferLED(uint16 CurrWSLED, const WSLEDStruct * c) {
 uint16 i;
 uint16 *WSPWMptr;

 Probe(1);
 i = WS2812_COLOUR_FRAME_LEN * CurrWSLED;
 WSPWMptr = &WSLEDPWMBuffer[0] + i;

 // WS2812 order is G R B
 GenWSLEDPWM(&WSPWMptr, c->g);
 GenWSLEDPWM(&WSPWMptr, c->r);
 GenWSLEDPWM(&WSPWMptr, c->b);

 Probe(0);
 } // SetWSBufferLED
 */

/*
 PinDef WSPin = // Aux1 Pin
 {true, PC6, GPIO_Mode_AF, GPIO_OType_PP, GPIO_PuPd_NOPULL,
 {true, TIM8, TIM_Channel_1, TIM_DMA_CC1, &(TIM8->CCR1), GPIO_AF_TIM8 },
 {true, DMA_Channel_0, DMA2_Stream2}, DMA2_Stream2_IRQn };
 */

#if defined(WS_ONE_SHOT)
HAL_StatusTypeDef TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel) {

	switch (Channel) {
	case TIM_CHANNEL_1:
		TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
		break;
	case TIM_CHANNEL_2:
		TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
		break;
	case TIM_CHANNEL_3:
		TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
		break;
	case TIM_CHANNEL_4:
		TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
		break;
	default:
		break;
	}

	// Disable the Capture compare channel
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);

	//if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) // Disable the Main Output
	//	__HAL_TIM_MOE_DISABLE(htim);

	// Disable the Peripheral
	__HAL_TIM_DISABLE(htim);

	// Change the htim state
	htim->State = HAL_TIM_STATE_READY;

	return HAL_OK;
}


void WSDMAEnable(void) {
	DMA_SetCurrDataCounter(WSPin.DMA.Stream, WSLEDBufferSize
			+ WS2812_COLOUR_FRAME_LEN); // load number of bytes to be transferred
	TIM_SetCounter(WSPin.Timer.Tim, 0);
	TIM_Cmd(WSPin.Timer.Tim, ENABLE);
	DMA_Cmd(WSPin.DMA.Stream, ENABLE);
	WSDMAActive = true;
} // WSDMAEnable

#endif

void UpdateWSLEDBuffer(void) {
	WSLEDStruct *WSLEDptr;
	uint16 *WSPWMptr;
	uint16 i;

	if (UsingWS28XXLEDs)
		if (WSLEDChanged) {
			CurrWSLED = 0;
			for (i = 0; i < WSLEDBufferSize; i += WS2812_COLOUR_FRAME_LEN) {
				WSLEDptr = &WSLEDs[CurrWSLED];
				WSPWMptr = &WSLEDPWMBuffer[0] + i;

				// WS2812 order is G R B
				GenWSLEDPWM(&WSPWMptr, WSLEDptr->g);
				GenWSLEDPWM(&WSPWMptr, WSLEDptr->r);
				GenWSLEDPWM(&WSPWMptr, WSLEDptr->b);
				CurrWSLED++;
			}
			WSLEDChanged = false;
#if defined(WS_ONE_SHOT)
			WSDMAEnable();
#endif
		}

} // UpdateWSLEDBuffer

void SetWSLEDColours(idx i, uint8 R, uint8 G, uint8 B) {
	WSLEDs[i].g = G;
	WSLEDs[i].r = R;
	WSLEDs[i].b = B;
} // wsSetColours


void InitWSLEDs(void) {
	idx l;

	if (UsingWS28XXLEDs) {

		for (l = 0; l < MAX_LED_PINS; l++) {
			DigitalWrite(&LEDPins[l].P, !ledsLowOn);
			LEDState[l] = false;
		}

		NoOfWSLEDs = Limit(CurrNoOfWSLEDs, MAX_LED_PINS, MAX_WS2812_LEDS);
		WSLEDGroupSize = NoOfWSLEDs / MAX_LED_PINS;
		WSLEDBufferSize = NoOfWSLEDs * WS2812_COLOUR_FRAME_LEN;

		memset(&WSLEDPWMBuffer, 0, sizeof(WSLEDPWMBuffer));
		for (l = 0; l < NoOfWSLEDs; l++)
			SetWSLEDColours(l, 0, 0, 0);

		WSLEDChanged = true;

		InitWSPin(WSLEDBufferSize + WS2812_COLOUR_FRAME_LEN); // end of buffer has zero colour field
	}

} // InitWSLEDs


void WSLEDColour(idx i, const WSLEDStruct w) {

	SetWSLEDColours(i, w.r, w.g, w.b);
} // WSLEDColour

void WSLED(uint8 l) {
	idx ll;

	for (ll = 0; MAX_LED_PINS; ll++)
		WSLEDColour(ll, WSLEDColours[l]);
} // WSLED

void WSLEDOn(idx l) { // run in pairs
	idx ll;

	if (!LEDState[l]) {
		for (ll = 0; ll < WSLEDGroupSize; ll++)
			WSLEDColour(l * WSLEDGroupSize + ll, WSLEDColours[l]);
		LEDState[l] = true;
		WSLEDChanged = true;
	}

} // WSLEDOn

void WSLEDOff(idx l) {
	idx ll;

	if (LEDState[l]) {
		for (ll = 0; ll < WSLEDGroupSize; ll++)
			SetWSLEDColours(l * WSLEDGroupSize + ll, 0, 0, 0);
		LEDState[l] = false;
		WSLEDChanged = true;
	}

} // WSLEDOff;

boolean WSLEDIsOn(idx l) {

	return ((WSLEDs[l].r != 0) || (WSLEDs[l].g != 0) || (WSLEDs[l].b != 0));

} // WSLEDIsOn

void WSLEDToggle(idx l) {

	if (WSLEDIsOn(l))
		WSLEDOff(l);
	else
		WSLEDOn(l);
} // WSLEDToggle

#else

void InitWSLEDs(void) {
} // InitWSLEDS

void WSLEDOn(uint8 l) {
} // WSLEDOn

void WSLEDOff(uint8 l) {
} // WSLEDOff;

boolean WSLEDIsOn(uint8 l) {

	return (false);
} // WSLEDIsOn

void WSLEDToggle(uint8 l) {
} // WSLEDToggle

#endif

//______________________________________________________________

uint8 LEDChase[] = { ledBlueSel, ledGreenSel, ledRedSel, ledYellowSel };
boolean LEDsSaved[4] = { false };
uint8 LEDPattern = 0;

void BeeperOff(void) {
	DigitalWrite(&GPIOPins[BeeperSel].P, 0);
} // BeeperOff

void BeeperOn(void) {
	DigitalWrite(&GPIOPins[BeeperSel].P, 1);
} // BeeperOn

void BeeperToggle(void) {
	DigitalToggle(&GPIOPins[BeeperSel].P);
} // BeeperToggle

boolean BeeperIsOn(void) {
	return (DigitalRead(&GPIOPins[BeeperSel].P) != 0);
} // BeeperIsOn

void LEDOn(uint8 l) {
	if (UsingWS28XXLEDs)
		WSLEDOn(l);
	else
		DigitalWrite(&LEDPins[l].P, ledsLowOn);
} // LEDOn

void LEDOff(uint8 l) {
	if (UsingWS28XXLEDs)
		WSLEDOff(l);
	else
		DigitalWrite(&LEDPins[l].P, !ledsLowOn);
} // LEDOff

void LEDToggle(uint8 l) {
	if (UsingWS28XXLEDs)
		WSLEDToggle(l);
	else
		DigitalToggle(&LEDPins[l].P);
} // LEDToggle

boolean LEDIsOn(uint8 l) {
	return ((ledsLowOn) ? (DigitalRead(&LEDPins[l].P)) : (!DigitalRead(
			&LEDPins[l].P)));
} // LEDIsOn

void LEDsOn(void) {
	idx l;

	for (l = 0; l < MAX_LED_PINS; l++)
		LEDOn(l);
} // LEDsOn

void LEDsOff(void) {
	idx l;

	for (l = 0; l < MAX_LED_PINS; l++)
		LEDOff(l);
} // LEDsOff

void SaveLEDs(void) { // one level only
	idx l;

	for (l = 0; l < MAX_LED_PINS; l++)
		LEDsSaved[l] = LEDIsOn(l);
} // SaveLEDs

void RestoreLEDs(void) {
	idx l;

	for (l = 0; l < MAX_LED_PINS; l++)
		LEDOn(LEDsSaved[l]);
} // RestoreLEDs

void LEDChaser(void) {

	if (mSTimeout(LEDChaserUpdate)) {
		if (F.AltControlEnabled && F.HoldingAlt) {
			LEDOff(LEDChase[LEDPattern]);
			if (LEDPattern < MAX_LED_PINS) {
				if (LEDPins[LEDPattern].Used)
					LEDPattern++;
			} else
				LEDPattern = 0;
			LEDOn(LEDChase[LEDPattern]);
		} else
			LEDsOff();

		mSTimer(LEDChaserUpdate, 100);
	}

} // LEDChaser


void PowerOutput(uint8 d) {
	uint8 s;

	LEDOff(d);
	for (s = 0; s < 10; s++) { // 10 FLASHes (count MUST be even!)
		LEDToggle(d);
		Delay1mS(50);
	}
} // PowerOutput


void InitLEDs(void) {

	LEDsOff();
	BeeperOff();

} // InitLEDs


#ifdef USE_LED_STRIP

#include "common/color.h"
#include "light_ws2811strip.h"
#include "drivers/nvic.h"
#include "dma.h"
#include "drivers/io.h"
#include "drivers/system.h"
#include "rcc.h"
#include "timer.h"

#if !defined(WS2811_PIN)
#define WS2811_PIN                      PA0
#define WS2811_TIMER                    TIM5
#define WS2811_DMA_HANDLER_IDENTIFER    DMA1_ST2_HANDLER
#define WS2811_DMA_STREAM               DMA1_Stream2
#define WS2811_DMA_IT                   DMA_IT_TCIF2
#define WS2811_DMA_CHANNEL              DMA_Channel_6
#define WS2811_TIMER_CHANNEL            TIM_Channel_1
#define WS2811_TIMER_GPIO_AF            GPIO_AF2_TIM5
#endif

HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
	/* Check the parameters */
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

	switch (Channel)
	{
		case TIM_CHANNEL_1:
		{
			/* Disable the TIM Capture/Compare 1 DMA request */
			__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
		}
		break;

		case TIM_CHANNEL_2:
		{
			/* Disable the TIM Capture/Compare 2 DMA request */
			__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
		}
		break;

		case TIM_CHANNEL_3:
		{
			/* Disable the TIM Capture/Compare 3 DMA request */
			__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
		}
		break;

		case TIM_CHANNEL_4:
		{
			/* Disable the TIM Capture/Compare 4 interrupt */
			__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
		}
		break;

		default:
		break;
	}

	/* Disable the Capture compare channel */
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);

	if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)
	{
		/* Disable the Main Output */
		__HAL_TIM_MOE_DISABLE(htim);
	}

	/* Disable the Peripheral */
	__HAL_TIM_DISABLE(htim);

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;

	/* Return function status */
	return HAL_OK;
}

static IO_t ws2811IO = IO_NONE;
bool ws2811Initialised = false;

static TIM_HandleTypeDef TimHandle;
static uint16_t timerChannel = 0;
static bool timerNChannel = false;

void WS2811_DMA_IRQHandler(dmaChannelDescriptor_t* descriptor)
{
	HAL_DMA_IRQHandler(TimHandle.hdma[descriptor->userParam]);
	if(timerNChannel) {
		HAL_TIMEx_PWMN_Stop_DMA(&TimHandle,timerChannel);
	} else {
		HAL_TIM_PWM_Stop_DMA(&TimHandle,timerChannel);
	}
	ws2811LedDataTransferInProgress = 0;
}

void ws2811LedStripHardwareInit(void)
{
	const timerHardware_t *timerHardware = timerGetByTag(IO_TAG(WS2811_PIN), TIM_USE_ANY);
	TIM_TypeDef *timer = timerHardware->tim;
	timerChannel = timerHardware->channel;

	if (timerHardware == NULL) {
		return;
	}
	TimHandle.Instance = timer;

	/* Compute the prescaler value */
	uint16_t prescaler = timerGetPrescalerByDesiredMhz(timer, WS2811_TIMER_MHZ);
	uint16_t period = 1000000 * WS2811_TIMER_MHZ / WS2811_CARRIER_HZ;

	BIT_COMPARE_1 = period / 3 * 2;
	BIT_COMPARE_0 = period / 3;

	TimHandle.Init.Prescaler = prescaler;
	TimHandle.Init.Period = period; // 800kHz
	TimHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK) {
		/* Initialization Error */
		return;
	}

	static DMA_HandleTypeDef hdma_tim;

	ws2811IO = IOGetByTag(IO_TAG(WS2811_PIN));
	IOInit(ws2811IO, OWNER_LED_STRIP, RESOURCE_OUTPUT, 0);
	IOConfigGPIOAF(ws2811IO, IO_CONFIG(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLDOWN), timerHardware->alternateFunction);

	__DMA1_CLK_ENABLE();

	/* Set the parameters to be configured */
	hdma_tim.Init.Channel = WS2811_DMA_CHANNEL;
	hdma_tim.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim.Init.Mode = DMA_NORMAL;
	hdma_tim.Init.Priority = DMA_PRIORITY_HIGH;
	hdma_tim.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	hdma_tim.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
	hdma_tim.Init.MemBurst = DMA_MBURST_SINGLE;
	hdma_tim.Init.PeriphBurst = DMA_PBURST_SINGLE;

	/* Set hdma_tim instance */
	hdma_tim.Instance = WS2811_DMA_STREAM;

	uint16_t dmaSource = timerDmaSource(timerChannel);

	/* Link hdma_tim to hdma[x] (channelx) */
	__HAL_LINKDMA(&TimHandle, hdma[dmaSource], hdma_tim);

	dmaInit(WS2811_DMA_HANDLER_IDENTIFER, OWNER_LED_STRIP, 0);
	dmaSetHandler(WS2811_DMA_HANDLER_IDENTIFER, WS2811_DMA_IRQHandler, NVIC_PRIO_WS2811_DMA, dmaSource);

	/* Initialize TIMx DMA handle */
	if (HAL_DMA_Init(TimHandle.hdma[dmaSource]) != HAL_OK) {
		/* Initialization Error */
		return;
	}

	TIM_OC_InitTypeDef TIM_OCInitStructure;

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.OCMode = TIM_OCMODE_PWM1;
	if (timerHardware->output & TIMER_OUTPUT_N_CHANNEL) {
		timerNChannel = true;
	}
	TIM_OCInitStructure.OCIdleState = TIM_OCIDLESTATE_RESET;
	TIM_OCInitStructure.OCPolarity = (timerHardware->output & TIMER_OUTPUT_INVERTED) ? TIM_OCPOLARITY_LOW: TIM_OCPOLARITY_HIGH;
	TIM_OCInitStructure.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	TIM_OCInitStructure.OCNPolarity = (timerHardware->output & TIMER_OUTPUT_INVERTED) ? TIM_OCNPOLARITY_LOW : TIM_OCNPOLARITY_HIGH;

	TIM_OCInitStructure.Pulse = 0;
	TIM_OCInitStructure.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&TimHandle, &TIM_OCInitStructure, timerChannel) != HAL_OK) {
		/* Configuration Error */
		return;
	}

	ws2811Initialised = true;
}

void ws2811LedStripDMAEnable(void)
{
	if (!ws2811Initialised) {
		ws2811LedDataTransferInProgress = 0;
		return;
	}

	if (timerNChannel) {
		if (HAL_TIMEx_PWMN_Start_DMA(&TimHandle, timerChannel, ledStripDMABuffer, WS2811_DMA_BUFFER_SIZE) != HAL_OK) {
			/* Starting PWM generation Error */
			ws2811LedDataTransferInProgress = 0;
			return;
		}
	} else {
		if (HAL_TIM_PWM_Start_DMA(&TimHandle, timerChannel, ledStripDMABuffer, WS2811_DMA_BUFFER_SIZE) != HAL_OK) {
			/* Starting PWM generation Error */
			ws2811LedDataTransferInProgress = 0;
			return;
		}
	}
}

#include "drivers/io.h"
#include "drivers/nvic.h"

#include "common/color.h"
#include "light_ws2811strip.h"
#include "dma.h"
#include "drivers/system.h"
#include "rcc.h"
#include "timer.h"

#if !defined(WS2811_PIN)
#if defined(STM32F4)
#define WS2811_PIN                      PA0
#define WS2811_DMA_HANDLER_IDENTIFER    DMA1_ST2_HANDLER
#define WS2811_DMA_STREAM               DMA1_Stream2
#define WS2811_DMA_CHANNEL              DMA_Channel_6
#elif defined(STM32F3)
#define WS2811_PIN                      PB8 // TIM16_CH1
#define WS2811_DMA_STREAM               DMA1_Channel3
#define WS2811_DMA_HANDLER_IDENTIFER    DMA1_CH3_HANDLER
#endif
#endif

static IO_t ws2811IO = IO_NONE;
bool ws2811Initialised = false;
#if defined(STM32F4)
static DMA_Stream_TypeDef *dmaRef = NULL;
#elif defined(STM32F3)
static DMA_Channel_TypeDef *dmaRef = NULL;
#else
#error "No MCU definition in light_ws2811strip_stdperiph.c"
#endif
static TIM_TypeDef *timer = NULL;

static void WS2811_DMA_IRQHandler(dmaChannelDescriptor_t *descriptor)
{
	if (DMA_GET_FLAG_STATUS(descriptor, DMA_IT_TCIF)) {
		ws2811LedDataTransferInProgress = 0;
		DMA_Cmd(descriptor->ref, DISABLE);
		DMA_CLEAR_FLAG(descriptor, DMA_IT_TCIF);
	}
}

void ws2811LedStripHardwareInit(void)
{
	DMA_InitTypeDef DMA_InitStructure;

	const timerHardware_t *timerHardware = timerGetByTag(IO_TAG(WS2811_PIN), TIM_USE_ANY);

	if (timerHardware == NULL) {
		return;
	}

	timer = timerHardware->tim;

	ws2811IO = IOGetByTag(IO_TAG(WS2811_PIN));
	IOInit(ws2811IO, OWNER_LED_STRIP, RESOURCE_OUTPUT, 0);
	IOConfigGPIOAF(ws2811IO, IO_CONFIG(GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP), timerHardware->alternateFunction);

	// Stop timer
	TIM_Cmd(timer, DISABLE);

	/* Compute the prescaler value */
	uint16_t period = 1000000 * WS2811_TIMER_MHZ / WS2811_CARRIER_HZ;

	BIT_COMPARE_1 = period / 3 * 2;
	BIT_COMPARE_0 = period / 3;

	/* PWM1 Mode configuration */
	timerConfigBase(timer, period, WS2811_TIMER_MHZ);
	timerPWMConfigChannel(timer, timerHardware->channel, timerHardware->output & TIMER_OUTPUT_N_CHANNEL, timerHardware->output & TIMER_OUTPUT_INVERTED, 0);

	TIM_CtrlPWMOutputs(timer, ENABLE);
	TIM_ARRPreloadConfig(timer, ENABLE);

	TIM_CCxCmd(timer, timerHardware->channel, TIM_CCx_Enable);
	TIM_Cmd(timer, ENABLE);

	// dmaInit(timerHardware->dmaIrqHandler, OWNER_LED_STRIP, 0);
	// dmaSetHandler(timerHardware->dmaIrqHandler, WS2811_DMA_IRQHandler, NVIC_PRIO_WS2811_DMA, 0);
	//dmaRef = timerHardware->dmaRef;
	dmaRef = WS2811_DMA_STREAM;
	dmaInit(WS2811_DMA_HANDLER_IDENTIFER, OWNER_LED_STRIP, 0);
	dmaSetHandler(WS2811_DMA_HANDLER_IDENTIFER, WS2811_DMA_IRQHandler, NVIC_PRIO_WS2811_DMA, 0);

	DMA_DeInit(dmaRef);

	/* configure DMA */
	DMA_Cmd(dmaRef, DISABLE);
	DMA_DeInit(dmaRef);
	DMA_StructInit(&DMA_InitStructure);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)timerCCR(timer, timerHardware->channel);
	DMA_InitStructure.DMA_BufferSize = WS2811_DMA_BUFFER_SIZE;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;

#if defined(STM32F4)
	DMA_InitStructure.DMA_Channel = WS2811_DMA_CHANNEL; //timerHardware->dmaChannel;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)ledStripDMABuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
#elif defined(STM32F3)
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ledStripDMABuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
#endif
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;

	DMA_Init(dmaRef, &DMA_InitStructure);
	TIM_DMACmd(timer, timerDmaSource(timerHardware->channel), ENABLE);
	DMA_ITConfig(dmaRef, DMA_IT_TC, ENABLE);
	ws2811Initialised = true;
}

#endif
