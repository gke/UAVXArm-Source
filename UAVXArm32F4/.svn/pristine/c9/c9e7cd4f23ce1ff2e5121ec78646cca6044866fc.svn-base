// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.
//    If not, see http://www.gnu.org/licenses/


#ifndef _control_h
#define _control_h

enum Attitudes {
	// strictly roll is a rotation around x but because
	// of the link between Acc and Angle we associate it with y or
	// the rotation of y around x
	Pitch,
	Roll,
	Yaw
};
enum Sensors {
	X, Y, Z
};

enum MagSensors {
	MX, MZ, MY
};
enum Directions {
	BF, LR, UD
};
// Roll, Pitch & Yaw

enum ControlModes {
	AngleMode, RateMode, RelayAngleMode, RelayRateMode, TuningMode
};

typedef struct {
	real32 Kp, Ki, IntE, IL, Kd, Dp;
} PIDStruct;

typedef struct {
	PIDStruct O, I;
	real32 FC; // shared by both PID loops as appropriate
	real32 Limiter;
	// controls
	real32 Desired;
	// body frame sensors
	real32 Ratep, DriftCorr, Angle;
	// stats
	real32 RateD, RateDp;
	HistStruct RateF, RateDF;
	real32 Control, NavCorr;
	real32 Out;
} AxisStruct;

typedef struct {
	PIDStruct O, I;
	real32 IL;
} AltStruct;

extern void DoAltitudeControl(void);
extern void ZeroPIDIntegrals(void);

extern void DoControl(void);
extern void InitControl(void);

extern AxisStruct A[3];
extern AltStruct Alt;
extern real32 AltFF;

extern real32 CameraAngle[3], OrbitCamAngle;

extern real32 CurrMaxTiltAngle;
extern int16 AttitudeHoldResetCount;
extern real32 DesiredAltitude, Altitude, DesiredROC;
extern real32 AltFiltComp, AltComp, ROC, MinROCMPS;
extern real32 CruiseThrottle;
extern real32 AttComp;
extern real32 AltAccComp;
extern real32 ModeTransPoint, ModeTransPointR, AngleRateMix;
extern real32 YawStickScaleRadPS;
extern real32 YawStickThreshold;
extern real32 OrientationRad, OrientS, OrientC;

#if defined(GKE_TUNE)
int16 TuneTrim;
#endif

extern real32 GS;

#endif

