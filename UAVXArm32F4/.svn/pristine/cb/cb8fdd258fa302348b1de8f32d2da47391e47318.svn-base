// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// Gyros

#include "UAVX.h"

const char * GyroName[] = { "MLX90609", "ADXRS613/150", "ST-AY530",
		"ADXRS610/300", "UAVXArm32IMU", "FreeIMU", "GyroUnknown" };

void ShowGyroType(uint8 s, uint8 G) {
	TxString(s, GyroName[G]);
} // ShowGyroType

// ITG3200  1.214142088
const real32 GyroScale[] = { //
		13.0834, // MLX90609
				6.98131, // ADXRS613/150
				15.8666, // ST-AY530 0.0041
				17.4532, // ADXRS610/300
				0.001064225154f, // UAVXArm32IMU
				0.001064225154f, // FreeIMU
				0.001064225154f };

const real32 AccScale = GRAVITY_MPS_S / MPU_1G;

uint8 GyroType = UAVXArm32IMU;

real32 AccBias[3], GyroBias[3];
real32 Acc[3], Rate[3];

// NED
// P,R,Y
// BF, LR, UD


void GetIMU(void) {

	ReadAccAndGyro();

	UpdateAccAndGyroBias();

	Rate[Pitch] = ((real32) RawGyro[X] - GyroBias[X]) * GyroScale[GyroType]; // assigned logically
	Rate[Roll] = ((real32) RawGyro[Y] - GyroBias[Y]) * GyroScale[GyroType];
	Rate[Yaw] = -((real32) RawGyro[Z] - GyroBias[Z]) * GyroScale[GyroType];

	Acc[BF] = ((real32) RawAcc[Y] - AccBias[Y]) * AccScale;
	Acc[LR] = ((real32) RawAcc[X] - AccBias[X]) * AccScale;
	Acc[UD] = -((real32) RawAcc[Z] - AccBias[Z]) * AccScale;

	F.IMUFailure = !F.IMUCalibrated;

} // GetIMU

void InitRatesAndAngles(void) {
	int32 g;
	AxisStruct *C;

	for (g = Pitch; g <= Yaw; g++) {
		GyroBias[g] = NV.GyroCal.C[g];
		C = &A[g];
		Rate[g] = C->Angle = 0.0f;
		C->RateDF.Primed = C->RateF.Primed = false;
	}

} // InitRatesAndAngles

void ErectGyros(int32 TS) {
	const int32 IntervalmS = 2;
	int32 i, g;
	real32 Av[3];
	int32 s = TS * 1000 / IntervalmS;

	for (g = X; g <= Z; g++)
		Av[g] = 0.0f;

	LEDOn(LEDRedSel);
	for (i = 0; i < s; i++) {
		Delay1mS(IntervalmS);

		GetIMU();

		for (g = X; g <= Z; g++)
			Av[g] += RawGyro[g];
	}

	for (g = X; g <= Z; g++)
		NV.GyroCal.C[g] = Av[g] / (real32) s;

	InitRatesAndAngles();

	NV.GyroCal.TRef = MPU6XXXTemperature;

	LEDOff(LEDRedSel);

} // ErectGyros


void InitIMU(void) {
	int32 a;
	boolean r;

	InitMPU6XXX();

	GetIMU();

	r = true;
	for (a = X; a <= Z; a++)
		r &= NV.AccCal.C[a] == 0.0f;

	F.IMUCalibrated = !r;

} // InitIMU

