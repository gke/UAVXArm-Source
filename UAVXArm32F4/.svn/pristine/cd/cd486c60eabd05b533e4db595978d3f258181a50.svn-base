/*
 * This file is part of Cleanflight.
 *
 * Cleanflight is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Cleanflight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Cleanflight.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "UAVX.h"

// WindEstimation.pdf William Premerlani 12 December 2009

WindStruct Wind = { 0, 0, { 0, 0, 0 } };

void UpdateWindEstimator(void) {
	idx a;
	static timeuS lastUpdatemS = 0;
	static real32 fusAngleP[3] = { 0, 0, 0 };
	static real32 gVelP[3] = { 0, 0, 0 };
	static real32 fusAngleSum[3] = { 0, 0, 0 };
	static real32 windLengthP = 0.0f;
	timeuS wdTmS;
	real32 theta, c, s, V;

	real32 gVel[3], gVelD[3], gVelSum[3];
	real32 fusAngle[3], fusAngleD[3];
	real32 Est[3], windLength, LengthSqD;

	timeuS NowmS = mSClock();

	//isGPSHeadingValid() &&//gpsSol.flags.validVelNE &&//gpsSol.flags.validVelD)

	if (F.IsFixedWing && F.GPSValid) {

		for (a = NorthC; a <= DownC; a++)
			gVel[a] = GPS.C[a].Vel;

		for (a = X; a <= Z; a++)
			fusAngle[a] = A[a].Angle;

		wdTmS = NowmS - lastUpdatemS;

		if ((lastUpdatemS != 0) && (wdTmS < 10000)) {

			for (a = X; a <= Z; a++)
				fusAngleD[a] = fusAngle[a] - fusAngleP[a];

			LengthSqD = Sqr(fusAngleD[X]) + Sqr(fusAngleD[Y])
					+ Sqr(fusAngleD[Z]);

			if (LengthSqD > Sqr(0.2f)) {
				// when turning, use the attitude response to estimate wind speed

				for (a = X; a <= Z; a++)
					gVelD[a] = gVel[a] - gVelP[a];

				V = (sqrtf(Sqr(gVelD[X]) + Sqr(gVelD[Y]) + Sqr(gVelD[Z])))
						/ sqrtf(LengthSqD);

				for (a = X; a <= Z; a++)
					fusAngleSum[X] = fusAngle[X] + fusAngleP[X];

				for (a = X; a <= Z; a++)
					gVelSum[a] = gVel[a] + gVelP[a];

				memcpy(fusAngleP, fusAngle, sizeof(fusAngleP));
				memcpy(gVelP, gVel, sizeof(gVelP));

				theta = atan2f(gVelD[1], gVelD[0]) - atan2f(fusAngleD[1],
						fusAngleD[0]);
				s = sinf(theta);
				c = cosf(theta);

				Est[X] = (gVelSum[X] - V * (c * fusAngleSum[X] - s
						* fusAngleSum[Y])) * 0.5f;
				Est[Y] = (gVelSum[Y] - V * (s * fusAngleSum[X] + c
						* fusAngleSum[Y])) * 0.5f;
				Est[Z] = (gVelSum[Z] - V * fusAngleSum[Z]) * 0.5f;// equation 12

				windLengthP = sqrtf(Sqr(Wind.Est[X]) + Sqr(Wind.Est[Y])
						+ Sqr(Wind.Est[Z]));
				windLength = sqrtf(Sqr(Est[X]) + Sqr(Est[Y]) + Sqr(Est[Z]));

				if (windLength < (windLengthP + 20.0f))
					for (a = X; a <= Z; a++)
						Wind.Est[a] = Wind.Est[a] * 0.95f + Est[a] * 0.05f;

				Wind.Direction = Make2Pi(atan2f(Wind.Est[Y], Wind.Est[X]));
				Wind.Speed = sqrtf(Sqr(Wind.Est[X]) + Sqr(Wind.Est[Y]));

				lastUpdatemS = NowmS;
				F.WindEstValid = true;
			}
		} else { // taking to long

			lastUpdatemS = NowmS;
			F.WindEstValid = false;
			memcpy(fusAngleP, fusAngle, sizeof(fusAngleP));
			memcpy(gVelP, gVel, sizeof(gVelP));
		}
	}
}

