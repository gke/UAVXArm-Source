// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/


#include "UAVX.h"

real32 DensityAltitudeP;
real32 BaroVariance = 0.35f;
real32 AccZVariance = 0.04f;
real32 AccZSDevN = 0.3f;
real32 TrackAccZVariance = 0.04f;

real32 m00 = 1.0f;
real32 m01 = 0.0f;
real32 m10 = 0.0f;
real32 m11 = 1.0f;

void InitAltitudeFilters(void) {
	const uint8 AltLPFOrder = 1;
	const uint8 ROCLPFOrder = 2;
	const uint8 ROCFLPFOrder = 2;

	m00 = 1.0f;
	m01 = 0.0f;
	m10 = 0.0f;
	m11 = 1.0f;

	Altitude = ROC = ROCF = AccZ = AccZBias = 0.0f;

	initLPFn(&AccZBumpLPF, 2, 1.0f);

	initLPFn(&AltitudeLPF, AltLPFOrder, AltLPFHz); // ALT_UPDATE_MS
	initLPFn(&ROCLPF, ROCLPFOrder, AltLPFHz);
	initLPFn(&FROCLPF, ROCFLPFOrder, AltLPFHz * 0.25f);

} // InitAltitudeFilters


// Kalman

// https://shepherdingelectrons.blogspot.com/2017/06/height-and-vertical-velocity-kalman.html


void AltitudeKF(real32 Alt, real32 AccZ, real32 dT) {
	const real32 q00 = 0.5f * AccZVariance * (dT * dT * dT * dT);
	const real32 q01 = 0.5f * AccZVariance * (dT * dT * dT);
	const real32 q10 = 0.5f * AccZVariance * (dT * dT * dT);
	const real32 q11 = AccZVariance * (dT * dT);

	real32 ps0, ps1, cse;
	real32 pp00, pp01, pp10, pp11;
	real32 inov, icR, kg0, kg1;

	ps0 = DensityAltitude + ROC * dT + 0.5f * AccZ * Sqr(dT);
	ps1 = ROC + AccZ * dT;

	cse = m11 * dT;
	pp01 = m01 + cse + q01;

	pp10 = m10 + cse;
	pp00 = m00 + (m01 + pp10) * dT + q00;
	pp10 += q10;
	pp11 = m11 + q11;

	inov = Alt - ps0;
	icR = 1.0f / (pp00 + BaroVariance);

	kg0 = pp00 * icR;
	kg1 = pp10 * icR;

	DensityAltitude = ps0 + kg0 * inov;
	ROC = ps1 + kg1 * inov;

	m00 = pp00 * (1.0f - kg0);
	m01 = pp01 * (1.0f - kg0);
	m10 = pp10 - pp00 * kg1;
	m11 = pp11 - pp01 * kg1;

} // AltitudeKF


/**
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <robin.lilja@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. - Robin Lilja
 *
 * @file altitude_cpp
 * @author Robin Lilja
 * @date 23 Jul 2015
 */

// A linear Kalman filter estimator of altitude and vertical velocity.


void AltitudeKFLilja(real32 Alt, real32 AccZ, real32 dT) {
	real32 pp00, pp01, pp10, pp11, ps0, ps1, cse;

	// Propagate

	// The state vector is defined as x = [h v]' where  'h' is altitude above ground and 'v' velocity, both
	// aligned with the vertical direction of the Earth NED frame, but positive direction being upwards to zenith.

	// State-space system model 'x_k = A*x_k-1 + B*u_k is given by:
	//
	//	x_k = [ h_k ] = [ 1 dT ] * [ h_k-1 ] + [ 1/2*dT^2 ] * u_k
	//  	      [ v_k ]   [ 0  1 ]   [ v_k-1 ]   [ dT       ]
	//
	//			   A			     B
	//
	// where 'u_k' is our acceleration input signal.

	// Propagation of the state (equation of motion) by Euler integration

	ps0 = DensityAltitude + ROC * dT + 0.5f * AccZ * Sqr(dT);
	ps1 = ROC + AccZ * dT;

	// The "a priori" state estimate error covariance 'P_k|k-1 = A * P_k-1 * A' + Q_k' is calculated as follows:
	//
	// P_k|k-1 = [ 1 dT ] * P_k-1 * [  1 0 ] + Q_k
	//	     [ 0  1 ]	        [ dT 1 ]

	// The process noise covariance matrix 'Q' is a bit trickier to derive, but consider some additive noise 'w_k' perturbing the
	// true acceleration 'a_k', thus the input signal is 'u_k = a_k + w_k'. The affect of 'w_k' on the state estimate is by linearity
	// described by [1/2*dT^2 dT]' i.e. the input matrix 'B'. We call this new matrix 'G'.
	//
	// Then, by definition* 'Q' equals 'G * G' * ﾏタ2', which in our case translates into:
	//
	// Q_k = G_k * G'_k * ﾏダaccelerometer^2 = [(dT^4)/4 (dT^3)/2] * ﾏダaccelerometer^2
	//					  [(dT^3)/2     dT^2]
	//
	// * I only get half of the math showing 'Q = G * G' * ﾏタ2', so I hide myself behind 'by definition'.

	// Calculate the state estimate covariance
	//

	cse = 0.5f * AccZVariance * Sqr(dT);

	pp00 = m00 + (m10 + m01 + (m11 + 0.5f * cse) * dT) * dT;
	pp01 = m01 + (m11 + cse) * dT;
	pp10 = m10 + (m11 + cse) * dT;
	pp11 = m11 + AccZVariance * Sqr(dT);

	// Update

	// Observation vector 'zhat' from the current state estimate:
	//
	// zhat_k = [ 1 0 ] * [ h_k ]
	//                    [ v_k ]
	//             H

	// 'H' is constant, so its time instance I'm using below is a bit ambitious.
	// The inovation (or residual) is given by 'y = z - zhat', where 'z' is the actual observation i.e. measured state.
	// Calculate inovation, in this particular case we observe the altitude state directly by an altitude measurement
	real32 y = Alt - ps0;

	// The inovation covariance is defined as 'S_k = H_k * P_k|k-1 * H'_k + R_k', for this particular case
	// 'H_k * P_k|k-1 * H'_k' is equal to the first row first column element of 'P_k|k-1' i.e. P_00.

	// The Kalman gain equals 'K_k = P_k|k-1 * H'_k * S_k^-1', where
	//
	// P_k|k-1 * H'_k = [ P_00 ]
	//                  [ P_10 ]
	//
	// and 'S_k^-1' equals '1/S_k' since 'S_k^-1' is being a scalar (that is a good thing!).

	// Calculate the inverse of the inovation covariance
	real32 Sinv = 1.0f / (pp00 + BaroVariance);

	// Calculate the Kalman gain
	real32 K0 = pp00 * Sinv;
	real32 K1 = pp10 * Sinv;

	// Update the state estimate
	DensityAltitude = ps0 + K0 * y;
	ROC = ps1 + K1 * y;

	// The "a posteriori" state estimate error covariance equals 'P_k|k = (I - K_k * H_k) * P_k|k-1', where
	//
	//  (I - K_k * H_k) = ( [ 1 0 ] - [ K_0 ] * [ 1 0 ] ) = [ (1-K_0) 0  ] , thus
	//                    ( [ 0 1 ]   [ K_1 ]           )   [ -K_1    1  ]
	//
	//  P_k|k = (I - K_k * H_k) * P_k+1|k = [ (1-K_0) 0 ] * [ P_00 P_01 ] = [ (1-K_0)*P_00       (1-K_0)*P_01       ]
	//					[ -K_1    1 ]   [ P_10 P_00 ]   [ (-K_1*P_00 + P_10) (-K_1*P_01 + P_00) ]

	// Calculate the state estimate covariance
	m00 = pp00 - K0 * pp00;
	m01 = pp01 - K0 * pp01;
	m10 = pp10 - K1 * pp00;
	m11 = pp11 - K1 * pp01;

} // AltitudeKFLilja




