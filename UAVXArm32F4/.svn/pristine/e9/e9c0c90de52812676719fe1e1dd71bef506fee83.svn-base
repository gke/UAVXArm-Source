// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

#include "UAVX.h"

void DFT8(real32 v, real32 *DFT) { // 137uS
#if defined(INC_DFT)
	const real32 mR = 1.0 / 8.0;
	static boolean Primed = false;
	static real32 cosarg[8][8], sinarg[8][8];
	static real32 inp[8];
	long i, k;
	double arg;
	double x[8], y[8];

	if (!Primed) {
		for (i = 0; i < 8; i++) {
			inp[i] = v;
			arg = -2.0 * PI * (real32) i * mR;
			for (k = 0; k < 8; k++) {
				cosarg[i][k] = cosf(arg * (real32) k);
				sinarg[i][k] = sinf(arg * (real32) k);
			}
		}
		Primed = true;
	} else {
		for (i = 7; i > 0; i--)
			inp[i] = inp[i - 1];
		inp[0] = v;
	}

	for (i = 0; i < 8; i++) {
		x[i] = y[i] = 0.0;
		for (k = 0; k < 8; k++) {
			x[i] += inp[k] * cosarg[i][k];
			y[i] += inp[k] * sinarg[i][k];
		}
	}

	for (i = 0; i < 8; i++)
		DFT[i] = sqrtf(Sqr(x[i]) + Sqr(y[i])) * mR;

#endif
} // DFT8


void InitSmoothr32xn(HistStruct * F) {
	F->Primed = false;
} // InitSmooth32xn

real32 Smoothr32xn(HistStruct * F, uint8 n, real32 v) {
	uint8 i, p;

	if (!F->Primed) {
		for (i = 0; i < n; i++)
			F->h[i] = v;

		F->Head = 0;
		F->Tail = (n - 1);

		F->S = v * (real32) n;
		F->Primed = true;
	} else {
		p = F->Head;
		F->S -= F->h[p];
		F->Head = (p + 1) & (n - 1);
		p = F->Tail;
		p = (p + 1) & (n - 1);
		F->h[p] = v;
		F->Tail = p;
		F->S += v;
	}

	return (F->S / (real32) n);
} // Smoothr32xn

uint32 Smoothuint32xn(uint32HistStruct * F, uint8 n, uint32 v) {
	uint8 i, p;

	if (!F->Primed) {
		for (i = 0; i < n; i++)
			F->h[i] = v;

		F->Head = 0;
		F->Tail = (n - 1);

		F->S = v * n;
		F->Primed = true;
	} else {
		p = F->Head;
		F->S -= F->h[p];
		F->Head = (p + 1) & (n - 1);
		p = F->Tail;
		p = (p + 1) & (n - 1);
		F->h[p] = v;
		F->Tail = p;
		F->S += v;
	}

	return (F->S / n);
} // Smoothuint32xn


real32 LeadFilter(real32 Pos, real32 VelP, real32 Vel, real32 Lag) {

	return (Pos + Vel * Lag + (Vel - VelP) * Sqr(Lag));
} // LeadFilter

void InitLPFilter(HistStruct * F) {

	F->Primed = false;

} // InitLPFilter

real32 LPFilterBW(HistStruct * F, real32 v, real32 CutHz, real32 dT) {
	real32 r;
	uint8 i;

	// WARNING - the priming process uses the first dT only and so
	// this is better instantiated using a constant for dT
	if (!F->Primed) {
		real32 wc, k1, k2, k3, a0, a1, a2, b1, b2;

		wc = tan(PI * CutHz * dT);
		k1 = sqrtf(2.0f) * wc;
		k2 = Sqr(wc);
		a0 = k2 / (1.0f + k1 + k2);
		a1 = 2.0f * a0;
		a2 = a0;
		k3 = 2.0f * a0 / k2;
		b1 = -2.0f * a0 + k3;
		b2 = 1 - 2.0f * a0 - k3;
		F->c[0] = a0;
		F->c[1] = a1;
		F->c[2] = a2;
		F->c[3] = b1;
		F->c[4] = b2;

		for (i = 0; i < 5; i++)
			F->h[i] = v;
		F->Primed = true;
	}

	for (i = 4; i > 0; i--)
		F->h[i] = F->h[i - 1];
	F->h[0] = v;

	r = 0.0f;
	for (i = 0; i < 5; i++)
		r += F->h[i] * F->c[i];

	return (r);

} // LPFilterBW

real32 LPFilter(HistStruct * F, real32 v, real32 CutHz, real32 dT) {

	if (!F->Primed) {
		F->h[0] = v;
		F->Primed = true;
		F->Tau = 1.0f / (TWO_PI * CutHz);
	}

	F->h[0] = F->h[0] + (v - F->h[0]) * dT / (F->Tau + dT);

	return (F->h[0]);

} // LPFilter

void InitSlewFilter(HistStruct * F) {

	F->Primed = false;

} // InitSlewFilter


real32 SlewFilter(HistStruct * F, real32 v, real32 CutHz, real32 dT) {
	// Series of single pole LP Filters - this provides a smooth transition
	// between set-points. The cutoff frequency is nominal and is reduced
	// by the cascaded stages.
	real32 c;

	if (!F->Primed) {
		F->h[0] = F->h[1] = F->h[2] = v;
		F->Primed = true;
	}

	c = dT / (1.0f / (TWO_PI * CutHz) + dT);
	F->h[0] += (v - F->h[0]) * c;

#if defined(SLEW_3_STAGE)
	F->h[1] += (F->h[0] - F->h[1]) * c;
	F->h[2] += (F->h[1] - F->h[2]) * c;

	return (F->h[2]);
#else

	return (F->h[0]);

#endif

} // SlewFilter

real32 SlewLimit(real32 Old, real32 New, real32 Slew, real32 dT) {
	// best for capturing noise?
	real32 Low, High, SlewD;

	SlewD = Slew * dT;

	Low = Old - SlewD;
	High = Old + SlewD;
	return ((New < Low) ? Low : ((New > High) ? High : New));
} // SlewLimit


real32 Threshold(real32 v, real32 t) {

	if (v > t)
		v -= t;
	else if (v < -t)
		v += t;
	else
		v = 0.0f;

	return (v);
} // Threshold


real32 DeadZone(real32 v, real32 t) {

	if (Abs(v) <= t)
		v = 0.0f;

	return (v);
} // DeadZone

real32 SlewLimitLPFilter(real32 Old, real32 New, real32 Slew, real32 F,
		real32 dT) {
	// set slew to an "impossible" difference between samples
	real32 r;
	New = SlewLimit(Old, New, Slew, dT);
	r = Old + (New - Old) * dT / ((1.0f / (TWO_PI * F)) + dT);

	return (r);
} // SlewLimitLPFilter

real32 Make2Pi(real32 A) {
	while (A < 0)
		A += TWO_PI;
	while (A >= TWO_PI)
		A -= TWO_PI;

	return (A);
} // Make2Pi

real32 MakePi(real32 A) {
	while (A < -DegreesToRadians(180))
		A += DegreesToRadians(360);
	while (A >= DegreesToRadians(180))
		A -= DegreesToRadians(360);

	return (A);
} // MakePi


real32 invSqrt(real32 x) {

#if defined(STM32F4)
	return (1.0f / sqrtf(x)); // hopefully gcc uses VSQRT for M4
#else
	// Fast inverse square-root
	// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

	real32 halfx = 0.5f * x;
	real32 y = x;
	int32 i = *(long*) &y;
	i = 0x5f3759df - (i >> 1);
	y = *(real32*) &i;
	y = y * (1.5f - (halfx * y * y));
	return y;
#endif
} // invSqrt


void Rotate(real32 * nx, real32 * ny, real32 x, real32 y, real32 A) { // A rotation CW
	static real32 cA = 1.0f;
	static real32 sA = 0.0f;
	static real32 AP = 0.0f;
	real32 Temp;

	if (A != AP) { // saves ~7uS for successive calls with same angle
		cA = cosf(A);
		sA = sinf(A);
		AP = A;
	}

	Temp = x * cA + y * sA;
	*ny = -x * sA + y * cA;
	*nx = Temp;

} // Rotate


real32 DecayX(real32 v, real32 d) {

	if (v < -d)
		v += d;
	else if (v > d)
		v -= d;
	else
		v = 0.0f;

	return (v);
} // DecayX
