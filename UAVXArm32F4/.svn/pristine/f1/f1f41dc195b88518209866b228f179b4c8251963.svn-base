// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

#include "UAVX.h"

#include "uavx_default_params.h"

typedef struct {
	real32 Kp, Ki, LPFCutOffHz;
} NPStruct;
const NPStruct NP[] = { { 0.0324f, 0.000103f, 0.25f },
		{ 0.138f, 0.00889f, 0.5f }, { 0.2445f, 0.0386f, 1.0f }, { 0.312f,
				0.087156, 2.0f } };
uint8 NavStrength;

const real32 OKp = 0.25f;
const real32 OKi = 0.05f;
// derivative not used
const real32 OIL = 0.015f;

const real32 IKp = 0.005f;
const real32 IKi = 0.03f;
const real32 IKd = 0.0001f;
//const real32 IIL = 0.01f;

uint8 CurrPS, GUIPS;
volatile boolean StickArmed = false;

uint8 UAVXAirframe = AFUnknown;
boolean IsMulticopter, IsFixedWing;

uint8 CurrStateEst = EstUnknown;
uint8 PrevGyroLPF;
uint8 PrevGPS;
uint8 PrevUAVXAirframe;
boolean PrevUsingUplink;
boolean PrevExtLEDs;

NVStruct NV;

void CheckSetupError(void) {

	F.SetupError = (CurrRCType == RCUnknown) || (UAVXAirframe == AFUnknown);
} // CheckSetupError


void ClassifyAFType(uint8 AF) {

	UAVXAirframe = NV.P[CurrPS][AFType];

	IsFixedWing = (AF == ElevonAF) || (AF == AileronAF);
	IsMulticopter = !(IsFixedWing || (AF == VTOLAF) || (AF == Heli90AF));

	OrientationRad = DegreesToRadians(AFOrientation[UAVXAirframe]);
	OrientS = sinf(OrientationRad);
	OrientC = cosf(OrientationRad);

}// ClassifyAFType


void DoConfigBits(void) {

	F.FailsafesEnabled = (NV.P[CurrPS][ConfigBits] & UseFailsafeMask) == 0;
	F.UsingRTHAutoDescend = (NV.P[CurrPS][ConfigBits] & UseRTHDescendMask) != 0;
	F.UsingWPNavigation = (NV.P[CurrPS][ConfigBits] & UseWPNavigationMask) != 0;
	F.InvertMagnetometer = (NV.P[CurrPS][ConfigBits] & UseInvertMagMask) != 0;
	F.UsingRapidDescent = (NV.P[CurrPS][ConfigBits] & UseRapidDescentMask) != 0;

} // DoConfigBits

void RegeneratePIDCoeffs(void) {
	// retains familiar historical UAVP values
	AxisStruct * C;

	// Roll
	C = &A[Roll];

	C->O.Kp = (real32) NV.P[CurrPS][RollAngleKp] * OKp;
	C->O.Ki = (real32) NV.P[CurrPS][RollAngleKi] * OKi;
	C->O.IL = (real32) NV.P[CurrPS][RollIntLimit] * OIL;

	C->I.Kp = (real32) NV.P[CurrPS][RollRateKp] * IKp;
	C->I.Kd = (real32) NV.P[CurrPS][RollRateKd] * IKd;
	C->FC = PROP_LP_FREQ_HZ;

	// Pitch
	C = &A[Pitch];

	C->O.Kp = (real32) NV.P[CurrPS][PitchAngleKp] * OKp;
	C->O.Ki = (real32) NV.P[CurrPS][PitchAngleKi] * OKi;
	C->O.IL = (real32) NV.P[CurrPS][PitchIntLimit] * OIL;

	C->I.Kp = (real32) NV.P[CurrPS][PitchRateKp] * IKp;
	C->I.Kd = (real32) NV.P[CurrPS][PitchRateKd] * IKd;
	C->FC = PROP_LP_FREQ_HZ;

	// Yaw
	C = &A[Yaw];

	C->O.Kp = NV.P[CurrPS][YawAngleKp] * OKp; // Compass
	//C->O.Ki = NV.P[CurrPS][YawAngleKi] * OKi;
	//C->O.IL = (real32) NV.P[CurrPS][YawIntLimit] * IIL;

	C->I.Kp = (real32) NV.P[CurrPS][YawRateKp] * IKp;
	//C->I.Kd = (real32) NV.P[CurrPS][YawRateKd] * IKd;

	C->FC = PROP_LP_FREQ_HZ;

	Alt.O.Kp = (real32) NV.P[CurrPS][AltPosKp] * 0.018f;
	Alt.O.Ki = (real32) NV.P[CurrPS][AltPosKp] * 0.0074f;

	Alt.O.IL = 0.15f;

	Alt.I.Kp = (real32) NV.P[CurrPS][AltVelKp] * 0.0026f;

	Alt.I.Kd = (real32) NV.P[CurrPS][AltVelKd] * 0.00016f;

	// Nav

	Nav.LPFCutOffHz = 1.0f; // GPS_UPDATE_HZ * 0.2f;

	Nav.O.Kp = (real32) NV.P[CurrPS][NavPosKp] * 0.0059f; //0.00625f; //20 -> 0.125f;

	Nav.I.Kp = (real32) NV.P[CurrPS][NavVelKp] * 0.003675; // 0.012f; // 20 -> 0.24f;
	Nav.I.Ki = (real32) NV.P[CurrPS][NavVelKi] * 0.000096f; // 0.0078f; // 5 -> 0.039f;

	Nav.MaxVelocity = (real32) NV.P[CurrPS][NavVelIntLimit];

	Nav.YawKp = 2.0f;

	// Camera
	CamRoll.Kp = NV.P[CurrPS][CamRollKp] * 0.1f;
	CamPitch.Kp = NV.P[CurrPS][CamPitchKp] * 0.1f;

} // RegeneratePIDCoeffs

real32 ScaleCFCoefficients(real32 v) {

	//return (Limit((v * 0.001f) + 0.9f, 0.0f, 0.999f));
	return (Limit(v * 0.01f, 0.0f, 0.99f));
} // ScaleCFCoefficients

void UpdateParameters(void) {
	// overkill if only a single parameter has changed but not in flight loop
	real32 Temp;

	if (F.ParametersChanged) {

		// Misc

		F.UsingConvPropSense
				= (NV.P[CurrPS][ServoSense] & UseConvPropSenseMask) != 0;

		UpdateRCMap(); // for channel re-assignment

		// Change to physical configuration or attached devices  - NEEDS POWER CYCLE

		ClassifyAFType(NV.P[CurrPS][AFType]);
		if ((State == Preflight) || (State == Ready)) { // NOT IN FLIGHT
			if ((NV.P[CurrPS][StateEst] != CurrStateEst)
					|| (NV.P[CurrPS][ArmingMode] != ArmingMethod)
					|| (NV.P[CurrPS][SensorHint] != GyroType)
					|| (NV.P[CurrPS][RCType] != CurrRCType)
					|| (NV.P[CurrPS][ESCType] != CurrESCType) || (UAVXAirframe
					!= PrevUAVXAirframe)
					|| (CurrRCType != NV.P[CurrPS][RCType]) || (GPSType
					!= NV.P[CurrPS][GPSProtocol]) || (PrevExtLEDs
					!= ((NV.P[CurrPS][ConfigBits] & UseExtLEDsMask) != 0)))
				Catastrophe();

			if (F.Emulation
					!= ((NV.P[CurrPS][ConfigBits] & EmulationEnableMask) != 0))
				Catastrophe();

			//zzz how much of this is necessary?
			memset(&A, 0, sizeof(AxisStruct));
			memset(&Rate, 0, sizeof(Rate[3]));
			memset(&Acc, 0, sizeof(Acc[3]));
			Acc[Z] = -GRAVITY_MPS_S;
			memset(&Alt, 0, sizeof(AltStruct));
			memset(&Nav.O, 0, sizeof(PIDStruct));
			memset(&Nav.I, 0, sizeof(PIDStruct));
		}

		DoConfigBits();

		// Throttle

		Temp = Limit((int16)NV.P[CurrPS][PercentIdleThr],5, 20);
		IdleThrottle = FromPercent(Temp, RC_MAXIMUM);
		IdleThrottlePW = FromPercent(Temp, OUT_MAXIMUM);

		AltFF = FromPercent((real32)NV.P[CurrPS][AltThrottleFF], RC_MAXIMUM);

		CGOffset = Limit1((real32)NV.P[CurrPS][Balance] * 0.01f, 1.0f);

		CruiseThrottle
				= Limit(NV.P[CurrPS][CruiseThr] * 0.01f, THROTTLE_MIN_CRUISE, THROTTLE_MAX_CRUISE );

		// Attitude

		RollPitchMixFrac = NV.P[CurrPS][RollPitchMix] * 0.01f;
		YawStickScaleRadPS
				= Limit(NV.P[CurrPS][StickScaleYaw] * 0.1f, 0.25f, 4.0f)
						* STICK_TO_YAW_RATE_RADPS;

		YawStickThreshold
				= FromPercent(Limit(NV.P[CurrPS][StickHysteresis], 1, 10), RC_NEUTRAL);

		ModeTransPoint
				= FromPercent(Limit(NV.P[CurrPS][Horizon], 1, 100), 1.0f);
		ModeTransPointR = 1.0f / ModeTransPoint;

		// Madgwick

		KpAccBase = NV.P[CurrPS][MadgwickKpAcc] * 0.1f;
		KpMagBase = NV.P[CurrPS][MadgwickKpMag] * 0.1f;

		// Filters

		AltLPFHz = Limit((real32) NV.P[CurrPS][AltLPF] * 0.1f, 0.1f, 5.0f); // apply to Baro and Zacc

		// Altitude

		RFType = NV.P[CurrPS][RFUsed];
		InitRangefinder();

		MinROCMPS = -(real32) NV.P[CurrPS][MaxDescentRateDmpS] * 0.1f;

		AccConfidenceSDevR = 1.0f / (Limit(NV.P[CurrPS][AccConfSD], 0, 100)
				* 0.01f);

		// Nav

		Nav.MaxAngle = NAV_MAX_ANGLE_RAD;
		Nav.CrossTrackKp = NV.P[CurrPS][NavCrossTrackKp] * 0.01f;

		Nav.FenceRadius = NAV_DEFAULT_FENCE_M; // TODO: from Default Mission

		if ((NV.P[CurrPS][NavMagVar] == 0) && (GPS.year != 0)) {
			MagVariation = ComputeMagVar();
			NV.P[CurrPS][NavMagVar] = RadiansToDegrees(MagVariation);
		} else
			MagVariation = DegreesToRadians((real32)NV.P[CurrPS][NavMagVar]);

		InitServoSense();
		InitBattery();
		RegeneratePIDCoeffs();

		CurrTelType = NV.P[CurrPS][TelemetryType];
		F.UsingMAVLink = (CurrTelType == MAVLinkMinTelemetry) || (CurrTelType
				== MAVLinkMinTelemetry);

		CheckSetupError();

		F.ParametersChanged = false;
	}

} // UpdateParameters

#define THR_LO  (1<<(ThrottleRC<<1)) // 0b00000001
#define THR_CE  (3<<(ThrottleRC<<1)) // 0b00000011
#define THR_HI  (2<<(ThrottleRC<<1)) // 0b00000010
#define ROL_LO  (1<<(RollRC<<1)) // 0b00000100
#define ROL_CE  (3<<(RollRC<<1)) // 0b00001100
#define ROL_HI  (2<<(RollRC<<1)) // 0b00001000
#define PIT_LO  (1<<(PitchRC<<1)) // 0b00010000
#define PIT_CE  (3<<(PitchRC<<1)) // 0b00110000
#define PIT_HI  (2<<(PitchRC<<1)) // 0b00001000
#define YAW_LO  (1<<(YawRC<<1)) // 0b01000000
#define YAW_CE  (3<<(YawRC<<1)) // 0b11000000
#define YAW_HI  (2<<(YawRC<<1)) // 0b10000000
enum StickStates {
	MonitorSticks, SticksChanging, SticksChanged
};
static uint8 SticksState = MonitorSticks;
static uint8 StickPattern = 0;

void AccTrimStickAdjust(real32 BFTrim, real32 LRTrim) {

	NV.AccCal.C[Y] += BFTrim;
	NV.AccCal.C[X] += LRTrim;

	NV.AccCal.TRef = MPU6XXXTemperature;

} // AccTrimStickAdjust

void UpdateSticksState(void) {
	// pattern scheme from MultiWii
	uint32 NowmS;
	uint8 pattern = 0;
	uint8 i;

	real32 RCPattern[4];
	real32 Swap;

	for (i = ThrottleRC; i <= YawRC; i++)
		RCPattern[i] = RC[i];

	if (NV.P[CurrPS][ArmingMode] == YawStickArming) {
		Swap = RCPattern[RollRC];
		RCPattern[RollRC] = RCPattern[YawRC];
		RCPattern[YawRC] = Swap;
	}

	for (i = ThrottleRC; i <= YawRC; i++) {
		pattern >>= 2;
		if (RCPattern[i] > FromPercent(30, RC_MAXIMUM))
			pattern |= 0x80; // check for MIN
		if (RCPattern[i] < FromPercent(70, RC_MAXIMUM))
			pattern |= 0x40; // check for MAX
	}

	NowmS = mSClock();
	switch (SticksState) {
	case MonitorSticks:
		if (StickPattern != pattern) {
			StickPattern = pattern;
			mSTimer(NowmS, StickTimeout, 2000);
			SticksState = SticksChanging;
		}
		break;
	case SticksChanging:
		if (StickPattern == pattern) {
			if (NowmS > mS[StickTimeout])
				SticksState = SticksChanged;
		} else
			SticksState = MonitorSticks;
		break;
	default:
		break;
	}// switch

} // UpdateSticksState


void DoStickProgramming(void) {
	uint32 NowmS;
	uint8 NewCurrPS;
	real32 BFTrim, LRTrim;
	boolean NVChanged;

	if (!Armed()) {

		UpdateSticksState();

		if (SticksState == SticksChanged) {
			if ((NV.P[CurrPS][ArmingMode] != SwitchArming) && (StickPattern
					== (THR_LO | YAW_CE | PIT_CE | ROL_HI)) && ArmingSwitch
					&& !StickArmed) {
				LEDOn(LEDBlueSel);
				DoBeep(3, 0);
				StickArmed = true;
				SticksState = MonitorSticks;
				LEDOff(LEDBlueSel);
			} else {
				NewCurrPS = CurrPS;

				switch (StickPattern) {
				case THR_LO | YAW_HI | PIT_LO | ROL_CE: // TR
					NewCurrPS = 0;
					break;
				case THR_LO | YAW_LO | PIT_LO | ROL_CE: // TL
					NewCurrPS = 1;
					break;
				case THR_LO | YAW_HI | PIT_HI | ROL_CE: // BR
					NewCurrPS = 0;
					break;
				case THR_LO | YAW_LO | PIT_HI | ROL_CE: // BL
					NewCurrPS = 1;
					break;
				default:

					break;
				} // switch

				if (NewCurrPS != CurrPS) {
					LEDOn(LEDBlueSel);
					CurrPS = NewCurrPS;
					DoBeeps(CurrPS + 1);
					F.ParametersChanged = true;
					LEDOff(LEDBlueSel);
				}

				SticksState = MonitorSticks;
			}
		}
	} else if (State == Landed) {

		UpdateSticksState();

		if (SticksState == SticksChanged) {
			if ((NV.P[CurrPS][ArmingMode] != SwitchArming) && (StickPattern
					== (THR_LO | YAW_CE | PIT_CE | ROL_LO)) && StickArmed) {
				LEDOn(LEDBlueSel);
				DoBeep(1, 0);
				StickArmed = false;
				SticksState = MonitorSticks;
				LEDOff(LEDBlueSel);
			} else {
				BFTrim = LRTrim = 0.0f;
				NVChanged = true;
				switch (StickPattern) {
				case THR_LO | YAW_CE | PIT_HI | ROL_CE:
					BFTrim = +ACC_TRIM_STEP;
					break;
				case THR_LO | YAW_CE | PIT_LO | ROL_CE:
					BFTrim = -ACC_TRIM_STEP;
					break;
				case THR_LO | YAW_LO | PIT_CE | ROL_CE:
					LRTrim = -ACC_TRIM_STEP;
					break;
				case THR_LO | YAW_HI | PIT_CE | ROL_CE:
					LRTrim = +ACC_TRIM_STEP;
					break;
				default:
					NVChanged = false;
					break;
				} // switch

				if (NVChanged) {
					AccTrimStickAdjust(BFTrim, LRTrim);
					// updated in Landing or disarm UpdateNV();

					UpdateAccAndGyroBias();
					DoBeep(1, 0);
					SticksState = SticksChanging;
					NowmS = mSClock();
					mSTimer(NowmS, StickTimeout, 100);
					mSTimer(NowmS, ArmedTimeout, ARMED_TIMEOUT_MS);
				} else
					SticksState = MonitorSticks;
			}
		}
	}

	UpdateParameters();

} // DoStickProgramming

void UseDefaultParameters(void) { // loads a representative set of initial parameters as a base for tuning
	uint16 p, a;

	memset(&NV, 0, sizeof(NV));

	NV.CurrRevisionNo = RevisionNo;

	for (p = 0; p < MAX_PARAMETERS; p++)
		for (a = 0; a < 2; a++) // 3
			NV.P[a][p] = DefaultParams[a][p];

	CurrPS = 0;

	NV.Mission.NoOfWayPoints = 0;
	NV.Mission.ProximityAltitude = NAV_PROXIMITY_ALTITUDE_M;
	NV.Mission.ProximityRadius = NAV_PROXIMITY_RADIUS_M;
	NV.Mission.RTHAltHold = 15;

	CruiseThrottle = THROTTLE_DEFAULT_CRUISE;

	InitMagnetometerBias();

	UpdateNV();

	F.ParametersChanged = true;

} // UseDefaultParameters


void InitParameters(void) {

	CurrPS = 0;

	F.UsingUplink = true;

	ReadBlockNV(0, sizeof(NV), (int8 *) (&NV));

	//if (NV.CurrRevisionNo != RevisionNo)
	if (NV.P[CurrPS][RollRateKp] <= 0)
		UseDefaultParameters();

	F.ParametersValid = true; //unused

	CurrStateEst = F.Emulation ? MadgwickIMU : NV.P[CurrPS][StateEst];

	// relies on empty FLASH being 0xff or 0x00

	ClassifyAFType(NV.P[CurrPS][AFType]);
	PrevUAVXAirframe = UAVXAirframe;

	InitMAVLink();

	CGOffset = 0.0f;

	ArmingMethod = NV.P[CurrPS][ArmingMode];

	GyroType = NV.P[CurrPS][SensorHint];
	F.UsingAnalogGyros = (GyroType != UAVXArm32IMU) && (GyroType != FreeIMU);
	PrevGyroLPF = NV.P[CurrPS][GyroLPF];

	F.Emulation = (NV.P[CurrPS][ConfigBits] & EmulationEnableMask) != 0;

	CurrRCType = NV.P[CurrPS][RCType];
	DiscoveredRCChannels = CurrRCType == ParallelPPM ? NV.P[CurrPS][RCChannels]
			: 0;

	CurrESCType = NV.P[CurrPS][ESCType];

	UsingPWMSync = (CurrESCType == ESCSyncPWM) || (CurrESCType
			== ESCSyncPWMDiv8);

	CurrPIDCycleuS = CurrESCType == ESCSyncPWM ? PID_SYNCPWM_CYCLE_US
			: PID_CYCLE_US;

	InitPortCombination();

	if (CurrRCType != RCUnknown)
		InitRC();

	F.ConfigError = PWMOutputsUsed[UAVXAirframe] > CurrMaxPWMOutputs;
	if (!F.ConfigError)
		InitDrives();

	PrevExtLEDs = UsingExtLEDs = (NV.P[CurrPS][ConfigBits] & UseExtLEDsMask)
			!= 0;
	if (UsingExtLEDs)
		wsInit();

	GPSType = NV.P[CurrPS][GPSProtocol];

#if defined(USE_V4_USART3)
	InitGPS();
#else
	if (CurrRCType == CompoundPPM)
		InitGPS();
#endif

	CheckSetupError();

	F.ParametersChanged = true;
	UpdateParameters();

} // InitParameters


