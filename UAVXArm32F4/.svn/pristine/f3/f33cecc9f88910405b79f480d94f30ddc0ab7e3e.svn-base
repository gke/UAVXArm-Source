// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/


#include "UAVX.h"

real32 BaroAltitudeP, VelZ, AltZ;
real32 BaroVariance = 0.35f;
real32 AccZVariance = 0.001f; // 0.00005f;
real32 AccZBiasVariance = 1.0f;

real32 m00 = 1.0f;
real32 m01 = 0.0f;
real32 m10 = 0.0f;
real32 m11 = 1.0f;

void InitAltitude(void) {

	Altitude = ROC = ROCF = AccZ = VelZ = AltZ = 0.0f;
	OriginAltitude = BaroAltitude = BaroAltitudeP = RawBaroAltitude;

} // InitAltitude


// Kalman

// https://shepherdingelectrons.blogspot.com/2017/06/height-and-vertical-velocity-kalman.html


void AltitudeKF(real32 Alt, real32 AccZ, real32 dT) {
	const real32 q00 = 0.5f * AccZVariance * (dT * dT * dT * dT);
	const real32 q01 = 0.5f * AccZVariance * (dT * dT * dT);
	const real32 q10 = 0.5f * AccZVariance * (dT * dT * dT);
	const real32 q11 = AccZVariance * (dT * dT);

	real32 ps0, ps1, opt;
	real32 pp00, pp01, pp10, pp11;
	real32 inn, icR, kg0, kg1;

	ps0 = BaroAltitude + ROC * dT + 0.5f * AccZ * Sqr(dT);
	ps1 = ROC + AccZ * dT;

	opt = m11 * dT;
	pp01 = m01 + opt + q01;

	pp10 = m10 + opt;
	pp00 = m00 + (m01 + pp10) * dT + q00;
	pp10 += q10;
	pp11 = m11 + q11;

	inn = Alt - ps0;
	icR = 1.0f / (pp00 + BaroVariance);

	kg0 = pp00 * icR;
	kg1 = pp10 * icR;

	BaroAltitude = ps0 + kg0 * inn;
	ROC = ps1 + kg1 * inn;

	opt = 1.0f - kg0;
	m00 = pp00 * opt;
	m01 = pp01 * opt;
	m10 = pp10 - pp00 * kg1;
	m11 = pp11 - pp01 * kg1;

} // AltitudeKF


//#define dT 0.004 # 250 Hz

void AltitudeKF2(real32 Alt, real32 AccZ, real32 dT) {
	const real32 AccZVariance = 1.0f;
	const real32 q00 = AccZVariance * 0.5f * (dT * dT * dT * dT);
	const real32 q01 = AccZVariance * 0.5f * (dT * dT * dT);
	const real32 q10 = AccZVariance * 0.5f * (dT * dT * dT);
	const real32 q11 = AccZVariance * (dT * dT);

	real32 ps0, ps1, opt;
	real32 pp00, pp01, pp10, pp11;
	real32 inn, icR, kg0, kg1;

	ps0 = BaroAltitude + dT * ROC;
	ps1 = ROC;

	opt = dT * m11;
	pp01 = m01 + opt + q01;

	pp10 = m10 + opt;
	pp00 = m00 + dT * (m01 + pp01) + q00;
	pp10 += q10;
	pp11 = m11 + q11;

	inn = Alt - ps0;
	icR = 1.0f / (pp00 + BaroVariance);

	kg0 = pp00 * icR;
	kg1 = pp10 * icR;

	BaroAltitude = ps0 + kg0 * inn;
	ROC = ps1 + kg1 * inn;

	opt = 1.0f - kg0;
	m00 = pp00 * opt;
	m01 = pp01 * opt;
	m10 = pp10 - pp00 * kg1;
	m11 = pp11 - pp01 * kg1;
} // AltitudeKF2

/**
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <robin.lilja@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. - Robin Lilja
 *
 * @file altitude_cpp
 * @author Robin Lilja
 * @date 23 Jul 2015
 */

// A linear Kalman filter estimator of altitude and vertical velocity.


void AltitudeKFLilja(real32 Alt, real32 AccZ, real32 dT) {
	real32 pp00, pp01, pp10, pp11, ps0, ps1;

	// Propagate

	// The state vector is defined as x = [h v]' where  'h' is altitude above ground and 'v' velocity, both
	// aligned with the vertical direction of the Earth NED frame, but positive direction being upwards to zenith.

	// State-space system model 'x_k = A*x_k-1 + B*u_k is given by:
	//
	//	x_k = [ h_k ] = [ 1 dT ] * [ h_k-1 ] + [ 1/2*dT^2 ] * u_k
	//  	      [ v_k ]   [ 0  1 ]   [ v_k-1 ]   [ dT       ]
	//
	//			   A			     B
	//
	// where 'u_k' is our acceleration input signal.

	// Propagation of the state (equation of motion) by Euler integration

	ps0 = Alt + ROC * dT + 0.5f * AccZ * Sqr(dT);
	ps1 = ROC + AccZ * dT;

	// The "a priori" state estimate error covariance 'P_k|k-1 = A * P_k-1 * A' + Q_k' is calculated as follows:
	//
	// P_k|k-1 = [ 1 dT ] * P_k-1 * [  1 0 ] + Q_k
	//	     [ 0  1 ]	        [ dT 1 ]

	// The process noise covariance matrix 'Q' is a bit trickier to derive, but consider some additive noise 'w_k' perturbing the
	// true acceleration 'a_k', thus the input signal is 'u_k = a_k + w_k'. The affect of 'w_k' on the state estimate is by linearity
	// described by [1/2*dT^2 dT]' i.e. the input matrix 'B'. We call this new matrix 'G'.
	//
	// Then, by definition* 'Q' equals 'G * G' * ﾏタ2', which in our case translates into:
	//
	// Q_k = G_k * G'_k * ﾏダaccelerometer^2 = [(dT^4)/4 (dT^3)/2] * ﾏダaccelerometer^2
	//					  [(dT^3)/2     dT^2]
	//
	// * I only get half of the math showing 'Q = G * G' * ﾏタ2', so I hide myself behind 'by definition'.

	// Calculate the state estimate covariance
	//

	pp00 = m00
			+ (m10 + m01 + (m11 + 0.25f * AccZVariance * Sqr(dT)) * dT)
					* dT;

	pp01 = m01 + (m11 + 0.5f * AccZVariance * Sqr(dT)) * dT;
	pp10 = m10 + (m11 + 0.5f * AccZVariance * Sqr(dT)) * dT;
	pp11 = m11 + AccZVariance * Sqr(dT);

	// Update

	// Observation vector 'zhat' from the current state estimate:
	//
	// zhat_k = [ 1 0 ] * [ h_k ]
	//                    [ v_k ]
	//             H

	// 'H' is constant, so its time instance I'm using below is a bit ambitious.
	// The innovation (or residual) is given by 'y = z - zhat', where 'z' is the actual observation i.e. measured state.
	// Calculate innovation, in this particular case we observe the altitude state directly by an altitude measurement
	real32 y = Alt - ps0;

	// The innovation covariance is defined as 'S_k = H_k * P_k|k-1 * H'_k + R_k', for this particular case
	// 'H_k * P_k|k-1 * H'_k' is equal to the first row first column element of 'P_k|k-1' i.e. P_00.

	// The Kalman gain equals 'K_k = P_k|k-1 * H'_k * S_k^-1', where
	//
	// P_k|k-1 * H'_k = [ P_00 ]
	//                  [ P_10 ]
	//
	// and 'S_k^-1' equals '1/S_k' since 'S_k^-1' is being a scalar (that is a good thing!).

	// Calculate the inverse of the innovation covariance
	real32 Sinv = 1.0f / (pp00 + BaroVariance);

	// Calculate the Kalman gain
	real32 K0 = pp00 * Sinv;
	real32 K1 = pp10 * Sinv;

	// Update the state estimate
	BaroAltitude = ps0 + K0 * y;
	ROC = ps1 + K1 * y;

	// The "a posteriori" state estimate error covariance equals 'P_k|k = (I - K_k * H_k) * P_k|k-1', where
	//
	//  (I - K_k * H_k) = ( [ 1 0 ] - [ K_0 ] * [ 1 0 ] ) = [ (1-K_0) 0  ] , thus
	//                    ( [ 0 1 ]   [ K_1 ]           )   [ -K_1    1  ]
	//
	//  P_k|k = (I - K_k * H_k) * P_k+1|k = [ (1-K_0) 0 ] * [ P_00 P_01 ] = [ (1-K_0)*P_00       (1-K_0)*P_01       ]
	//					[ -K_1    1 ]   [ P_10 P_00 ]   [ (-K_1*P_00 + P_10) (-K_1*P_01 + P_00) ]

	// Calculate the state estimate covariance
	m00 = pp00 - K0 * pp00;
	m01 = pp01 - K0 * pp01;
	m10 = pp10 - K1 * pp00;
	m11 = pp11 - K1 * pp01;
} // AltitudeKFLilja

// Complementary Filter


void AltitudeFreeIMUCF(real32 Alt, real32 AccZ, real32 dT) {
	// From FreeIMU Library originally

	const real32 kROC = 0.55f; // PI observer velocity gain
	const real32 kAlt = 1.0f; // PI observer position gain
	const real32 AccBias_K = 0.001f; // PI observer integral gain (bias cancellation)

	static real32 IntAltE = 0.0f;

	real32 AltE = 0.0f;
	real32 dROC;

	real32 dTOn2 = dT * 0.5f;

	AltE = Alt - BaroAltitudeP;
	IntAltE += AltE;
	IntAltE = Limit1(IntAltE, 1.5f); // too large?

	//AccZ += IntAltE * AccBias_K;

	dROC = AccZ * dT + kROC * AltE * dT;

	BaroAltitude += (ROC * 0.2f + dROC) * dTOn2 + kAlt * AltE * dT;

	ROC += dROC * 10.0f;

	BaroAltitudeP = BaroAltitude;

} // AltitudeFreeIMUCF


void AltitudeCF(real32 Alt, real32 AccZ, real32 dT) {
	// Greg's KISS Complementary Filter
	const real32 CF_K_POS = 0.05f;
	const real32 CF_K_VEL = 0.05f;

	AltZ += VelZ * dT + 0.5f * AccZ * Sqr(dT);
	VelZ += AccZ * dT;

	BaroAltitude = Alt * CF_K_POS + AltZ * (1.0f - CF_K_POS);
	ROC = (BaroAltitude - BaroAltitudeP) * CF_K_VEL / dT + VelZ * (1.0f
			- CF_K_VEL);

	AltZ = BaroAltitudeP = BaroAltitude;
	VelZ = ROC;

} // AltitudeCF


void AltitudeSimpleLPF(real32 Alt, real32 AccZ, real32 dT) {

	BaroAltitude = Alt; //LPFn(&AltitudeLPF, Alt, dT);
	ROC = (BaroAltitude - BaroAltitudeP) / dT;
	BaroAltitudeP = BaroAltitude;
	ROC = LPFn(&ROCLPF, ROC, dT);

} // AltitudeSimpleLPF


//_________________________________________________________________________________

// https://github.com/har-in-air

// Kalman filter configuration
// actual variance value used is accel_variance*1000
#define KF_ACCEL_VARIANCE_DEFAULT            50 // => 0.05
#define KF_ACCEL_VARIANCE_MIN                10
#define KF_ACCEL_VARIANCE_MAX                100

// This can be measured offline by calculating the
// statistical variance in cm^2 of about one second of
// altitude (in cm) samples from the MS5611.
#define KF_ZMEAS_VARIANCE_DEFAULT            300 // => 0.03
#define KF_ZMEAS_VARIANCE_MIN                100
#define KF_ZMEAS_VARIANCE_MAX                500

// This is set low as the residual acceleration bias after calibration
// is expected to have little variation/drift
#define KF_ACCELBIAS_VARIANCE   1.0f

// State being tracked
static real32 z_; // position
static real32 v_; // velocity
static real32 aBias_; // acceleration

// 3x3 State Covariance matrix
static real32 Pzz_;
static real32 Pzv_;
static real32 Pza_;
static real32 Pvz_;
static real32 Pvv_;
static real32 Pva_;
static real32 Paz_;
static real32 Pav_;
static real32 Paa_;

static real32 AccZBiasVariance_; // assumed fixed.
static real32 AccZVariance_; // environmental acceleration variance, depends on conditions
static real32 BaroAltitudeVariance_; //  sensor z measurement noise variance, measure offline, fixed

// Tracks the position z and velocity v of an object moving in a straight line,
// (here assumed to be vertical) that is perturbed by random accelerations.
// sensor measurement of z is assumed to have constant measurement noise
// variance zVariance.
// This can be calculated offline for the specific sensor.
// zInitial can be determined by averaging a few samples of the altitude measurement.
// vInitial and aBiasInitial can be set as 0.0
// AccZVariance can be specified with a large initial value to skew the
// filter towards the fresh data.

// kalmanFilter3_configure((real32)opt.kf.BaroAltitudeVariance, 1000.0f*(real32)opt.kf.accelVariance, KF_ACCELBIAS_VARIANCE, ZCmAvg, 0.0f, 0.0f);


void kalmanFilter3_configure(real32 BaroAltitudeVariance, real32 AccZVariance,
		real32 AccZBiasVariance, real32 zInitial, real32 vInitial,
		real32 aBiasInitial) {
	BaroAltitudeVariance_ = BaroAltitudeVariance;
	AccZVariance_ = AccZVariance;
	AccZBiasVariance_ = AccZBiasVariance;

	z_ = zInitial;
	v_ = vInitial;
	aBias_ = aBiasInitial;
	Pzz_ = 1.0f;
	Pzv_ = 0.0f;
	Pza_ = 0.0f;

	Pvz_ = 0.0f;
	Pvv_ = 1.0f;
	Pva_ = 0.0f;

	Paz_ = 0.0f;
	Pav_ = 0.0;
	Paa_ = 100000.0f;

} // kalmanFilter3_configure

// Updates state [Z, V] given a sensor measurement of z, acceleration a,
// and the time in seconds dT since the last measurement.

void kalmanFilter3_update(real32 z, real32 a, real32 dT, real32* pZ, real32* pV) {

	// Predict state
	real32 accel = a - aBias_;
	v_ += accel * dT;
	z_ += v_ * dT;

	// when AccZVariance is large, filter favours fresh data.
	// when small, filter favours existing state.

	// Predict State Covariance matrix
	real32 t00, t01, t02;
	real32 t10, t11, t12;
	real32 t20, t21, t22;

	real32 dT2On2 = Sqr(dT) * 0.5f;
	real32 dT3On2 = dT2On2 * dT;
	real32 dT4On4 = dT2On2 * dT2On2;

	t00 = Pzz_ + dT * Pvz_ - dT2On2 * Paz_;
	t01 = Pzv_ + dT * Pvv_ - dT2On2 * Pav_;
	t02 = Pza_ + dT * Pva_ - dT2On2 * Paa_;

	t10 = Pvz_ - dT * Paz_;
	t11 = Pvv_ - dT * Pav_;
	t12 = Pva_ - dT * Paa_;

	t20 = Paz_;
	t21 = Pav_;
	t22 = Paa_;

	Pzz_ = t00 + dT * t01 - dT2On2 * t02;
	Pzv_ = t01 - dT * t02;
	Pza_ = t02;

	Pvz_ = t10 + dT * t11 - dT2On2 * t12;
	Pvv_ = t11 - dT * t12;
	Pva_ = t12;

	Paz_ = t20 + dT * t21 - dT2On2 * t22;
	Pav_ = t21 - dT * t22;
	Paa_ = t22;

	Pzz_ += dT4On4 * AccZVariance_;
	Pzv_ += dT3On2 * AccZVariance_;

	Pvz_ += dT3On2 * AccZVariance_;
	Pvv_ += Sqr(dT) * AccZVariance_;

	Paa_ += AccZBiasVariance_;

	// Error
	real32 innov = z - z_;
	real32 sInv = 1.0f / (Pzz_ + BaroAltitudeVariance_);

	// Kalman gains
	real32 kz = Pzz_ * sInv;
	real32 kv = Pvz_ * sInv;
	real32 ka = Paz_ * sInv;

	// Update state
	z_ += kz * innov;
	v_ += kv * innov;
	aBias_ += ka * innov;

	*pZ = z_;
	*pV = v_;

	// Update state covariance matrix
	Pzz_ -= kz * Pzz_;
	Pzv_ -= kz * Pzv_;
	Pza_ -= kz * Pza_;

	Pvz_ -= kv * Pzz_;
	Pvv_ -= kv * Pzv_;
	Pva_ -= kv * Pza_;

	Paz_ -= ka * Pzz_;
	Pav_ -= ka * Pzv_;
	Paa_ -= ka * Pza_;

} // kalmanFilter3_update
